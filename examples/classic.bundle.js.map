{"version":3,"sources":["webpack:///classic.bundle.js","webpack:///webpack/bootstrap d4baa91a4ea12dadc50e","webpack:///./classic/index.js","webpack:///../src/index.js","webpack:///../src/infinite-tree.js","webpack:///(webpack)/~/node-libs-browser/~/events/events.js","webpack:///../~/clusterize.js/clusterize.js","webpack:///../~/flattree/lib/index.js","webpack:///../~/flattree/lib/flatten.js","webpack:///../~/flattree/lib/extend.js","webpack:///../~/flattree/lib/node.js","webpack:///../src/lookup-table.js","webpack:///../src/renderer.js","webpack:///../src/helper.js","webpack:///./classic/renderer.js","webpack:///./classic/index.styl?912b","webpack:///./classic/index.styl","webpack:///../~/css-loader/lib/css-base.js","webpack:///../~/style-loader/addStyles.js","webpack:///./classic/animation.styl?fd99","webpack:///./classic/animation.styl"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_src","_src2","_renderer","_renderer2","_helper","data","source","i","push","JSON","parse","replace","updatePreview","node","el","document","querySelector","o","label","children","length","parent","state","undefined","loadOnDemand","innerHTML","stringify","tree","autoOpen","droppable","loadNodes","parentNode","done","suffix","nodes","setTimeout","rowRenderer","selectable","shouldSelectNode","getSelectedNode","on","progress","style","width","console","log","e","dataTransfer","getData","quoteattr","loadData","selectNode","getChildNodes","draggableElement","addEventListener","preventDefault","stopPropagation","dragDrop","effectAllowed","target","srcElement","setData","window","_infiniteTree","_infiniteTree2","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_typeof","Symbol","iterator","_events","_events2","_clusterize","_clusterize2","_flattree","_lookupTable","_lookupTable2","ensureNodeInstance","Node","Error","InfiniteTree","_events$EventEmitter","options","this","_this","containerView","noDataText","defaultRowRenderer","openNodes","rootNode","selectedNode","clusterize","nodeTable","rows","scrollElement","contentElement","dragoverElement","contentListener","click","itemTarget","handleToggler","currentTarget","parentElement","className","indexOf","getAttribute","getNodeById","toggleNode","dragenter","removeClass","hasAttribute","canDrop","match","addClass","dragend","dragover","dropEffect","drop","emit","isDOMElement","extend","error","_this2","tag","createElement","tableElement","classNames","appendChild","_contentElement","scrollElem","contentElem","no_data_text","no_data_class","callbacks","clusterWillChange","clusterChanged","scrollingProgress","destroy","removeEventListener","clear","firstChild","removeChild","containerElement","addChildNodes","newNodes","index","_this3","concat","forEach","newNode","splice","apply","deleteCount","total","flatten","map","parentOffset","slice","childNode","flattenNode","set","update","appendChildNode","closeNode","nodeIndex","selectedIndex","rangeFrom","rangeTo","open","filter","hasChildren","flattenChildNodes","list","getFirstChild","getNextSibling","getParent","get","getOpenNodes","getRootNode","insertNodeAfter","referenceNode","insertNodeBefore","_this4","arguments","openAllNodes","openNode","_this5","loading","err","removeChildNodes","_this6","parentNodeIndex","childNodes","unset","removeNode","_this7","getPreviousSibling","scrollToNode","querySelectorAll","rowHeight","offsetHeight","scrollTop","Number","_options","selected","_selectedNode","_selectedIndex","toString","traverse","s","_loop","keys","key","join","updateNode","EventEmitter","_maxListeners","isFunction","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","n","isNaN","type","er","handler","len","args","listeners","Array","addListener","listener","newListener","warned","trace","once","g","removeListener","fired","position","removeAllListeners","ret","listenerCount","evlistener","emitter","name","definition","evt","element","fnc","attachEvent","off","detachEvent","isArray","arr","getStyle","prop","elem","getComputedStyle","currentStyle","ie","v","all","documentMode","is_mac","navigator","platform","toLowerCase","Clusterize","defaults","item_height","block_height","rows_in_block","rows_in_cluster","cluster_height","blocks_in_cluster","content_tag","show_no_data_row","keep_parity","scroll_top","option","elems","getElementById","content_elem","setAttribute","fetchMarkup","cache","bottom","scroll_elem","exploreEnvironment","insertToDOM","last_cluster","scroll_debounce","pointer_events_set","scrollEv","pointerEvents","clearTimeout","getClusterNum","getScrollProgress","resize_debounce","resizeEv","refresh","clean","html","generateEmptyRow","getRowsHeight","new_rows","getRowsAmount","add","where","_new_rows","append","prepend","rows_nodes","shift","outerHTML","opts","tagName","prev_item_height","Math","floor","parseInt","td","empty_row","no_data_content","createTextNode","generate","cluster_num","rows_len","top_offset","bottom_offset","rows_above","items_start","max","items_end","this_cluster_rows","renderExtraTag","class_name","height","clusterize_prefix","this_cluster_content_changed","checkChanges","only_bottom_offset_changed","layout","lastChild","last","div","child_nodes","ii","changed","_flatten","_flatten2","_node","_node2","_extend","_extend2","stack","pool","throwOnError","firstNode","depth","path","prefixMask","subtotal","_p$state","_p$state$total","isLastChild","_stack$pop","pop","current","prefix","mask","parentDidOpen","_p","_p2","_len","sources","_key","output","hasOwnProperty","getChildAt","getChildren","getLastChild","hasNextSibling","LookupTable","has","treeOptions","_node$loadOnDemand","_state$selected","childrenLength","more","togglerContent","toggler","buildHTML","class","title","treeNode","aria-id","aria-expanded","aria-depth","aria-path","aria-selected","aria-children","aria-total","tree-selected","returnValue","cancelBubble","dispatchEvent","eventType","createEvent","initEvent","hasClass","classes","split","toggleClass","_len2","_key2","ok","HTMLElement","nodeType","nodeName","isDOMNode","preserveCR","attrs","h","attr","renderer","_node$props","props","_state$loading","icon","glyphicon-folder-open","glyphicon-folder-close","glyphicon-file","loadingIcon","hidden","rotating","count","treeNodeAttributes","content","locals","result","item","mediaQuery","alreadyImportedModules","addStylesToDom","styles","domStyle","stylesInDom","refs","j","parts","addStyle","listToStyles","newStyles","css","media","sourceMap","part","insertStyleElement","styleElement","head","getHeadElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","nextSibling","insertBefore","removeStyleElement","idx","createStyleElement","createLinkElement","linkElement","rel","remove","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","bind","URL","createObjectURL","revokeObjectURL","Blob","btoa","updateLink","href","applyToTag","newObj","styleSheet","cssText","replaceText","cssNode","unescape","encodeURIComponent","blob","oldSrc","memoize","fn","memo","isOldIE","test","userAgent","getElementsByTagName","newList","mayRemove","textStore","replacement","Boolean"],"mappings":"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","file":"classic.bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _src = __webpack_require__(1);\n\t\n\tvar _src2 = _interopRequireDefault(_src);\n\t\n\tvar _renderer = __webpack_require__(12);\n\t\n\tvar _renderer2 = _interopRequireDefault(_renderer);\n\t\n\t__webpack_require__(13);\n\t\n\t__webpack_require__(17);\n\t\n\tvar _helper = __webpack_require__(11);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar data = [];\n\tvar source = '{\"id\":\"<root>\",\"label\":\"<root>\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"alpha\",\"label\":\"Alpha\",\"props\":{\"droppable\":true}},{\"id\":\"bravo\",\"label\":\"Bravo\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"charlie\",\"label\":\"Charlie\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"delta\",\"label\":\"Delta\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"echo\",\"label\":\"Echo\",\"props\":{\"droppable\":true}},{\"id\":\"foxtrot\",\"label\":\"Foxtrot\",\"props\":{\"droppable\":true}}]},{\"id\":\"golf\",\"label\":\"Golf\",\"props\":{\"droppable\":true}}]},{\"id\":\"hotel\",\"label\":\"Hotel\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"india\",\"label\":\"India\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"juliet\",\"label\":\"Juliet\",\"props\":{\"droppable\":true}}]}]},{\"id\":\"kilo\",\"label\":\"(Load On Demand) Kilo\",\"loadOnDemand\":true,\"props\":{\"droppable\":true}}]}]}';\n\t\n\tfor (var i = 0; i < 1000; ++i) {\n\t    data.push(JSON.parse(source.replace(/\"(id|label)\":\"([^\"]*)\"/g, '\"$1\": \"$2.' + i + '\"')));\n\t}\n\t\n\tvar updatePreview = function updatePreview(node) {\n\t    var el = document.querySelector('#preview');\n\t    if (node) {\n\t        var o = {\n\t            id: node.id,\n\t            label: node.label,\n\t            children: node.children ? node.children.length : 0,\n\t            parent: node.parent ? node.parent.id : null,\n\t            state: node.state\n\t        };\n\t        if (node.loadOnDemand !== undefined) {\n\t            o.loadOnDemand = node.loadOnDemand;\n\t        }\n\t        el.innerHTML = JSON.stringify(o, null, 2).replace(/\\n/g, '<br>').replace(/\\s/g, '&nbsp;');\n\t    } else {\n\t        el.innerHTML = '';\n\t    }\n\t};\n\t\n\tvar tree = new _src2['default'](document.querySelector('#tree'), {\n\t    autoOpen: true, // Defaults to false\n\t    droppable: true, // Defaults to false\n\t    loadNodes: function loadNodes(parentNode, done) {\n\t        var suffix = parentNode.id.replace(/(\\w)+/, '');\n\t        var nodes = [{\n\t            id: 'node1' + suffix,\n\t            label: 'Node 1'\n\t        }, {\n\t            id: 'node2' + suffix,\n\t            label: 'Node 2'\n\t        }];\n\t        setTimeout(function () {\n\t            done(null, nodes);\n\t        }, 1000);\n\t    },\n\t    rowRenderer: _renderer2['default'],\n\t    selectable: true, // Defaults to true\n\t    shouldSelectNode: function shouldSelectNode(node) {\n\t        // Defaults to null\n\t        if (!node || node === tree.getSelectedNode()) {\n\t            return false; // Prevent from deselecting the current node\n\t        }\n\t        return true;\n\t    }\n\t});\n\t\n\ttree.on('scrollProgress', function (progress) {\n\t    document.querySelector('#scrolling-progress').style.width = progress + '%';\n\t});\n\ttree.on('update', function () {\n\t    var node = tree.getSelectedNode();\n\t    updatePreview(node);\n\t});\n\ttree.on('openNode', function (node) {\n\t    console.log('openNode', node);\n\t});\n\ttree.on('closeNode', function (node) {\n\t    console.log('closeNode', node);\n\t});\n\ttree.on('dropNode', function (node, e) {\n\t    var source = e.dataTransfer.getData('text');\n\t    console.log('Dragged an element ' + JSON.stringify(source) + ' and dropped to ' + JSON.stringify(node.label));\n\t    document.querySelector('#dropped-result').innerHTML = 'Dropped to <b>' + (0, _helper.quoteattr)(node.label) + '</b>';\n\t});\n\ttree.on('selectNode', function (node) {\n\t    updatePreview(node);\n\t});\n\t\n\ttree.loadData(data);\n\t\n\t// Select the first node\n\ttree.selectNode(tree.getChildNodes()[0]);\n\t\n\t// Draggable Element\n\tvar draggableElement = document.querySelector('#draggable-element');\n\t\n\t// http://stackoverflow.com/questions/5500615/internet-explorer-9-drag-and-drop-dnd\n\t(0, _helper.addEventListener)(draggableElement, 'selectstart', function (e) {\n\t    (0, _helper.preventDefault)(e);\n\t    (0, _helper.stopPropagation)(e);\n\t    draggableElement.dragDrop();\n\t    return false;\n\t});\n\t\n\t(0, _helper.addEventListener)(draggableElement, 'dragstart', function (e) {\n\t    e.dataTransfer.effectAllowed = 'move';\n\t    var target = e.target || e.srcElement;\n\t    e.dataTransfer.setData('text', target.id);\n\t    document.querySelector('#dropped-result').innerHTML = '';\n\t});\n\t\n\t(0, _helper.addEventListener)(draggableElement, 'dragend', function (e) {});\n\t\n\twindow.tree = tree;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _infiniteTree = __webpack_require__(2);\n\t\n\tvar _infiniteTree2 = _interopRequireDefault(_infiniteTree);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tmodule.exports = _infiniteTree2['default'];\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _events = __webpack_require__(3);\n\t\n\tvar _events2 = _interopRequireDefault(_events);\n\t\n\tvar _clusterize = __webpack_require__(4);\n\t\n\tvar _clusterize2 = _interopRequireDefault(_clusterize);\n\t\n\tvar _flattree = __webpack_require__(5);\n\t\n\tvar _lookupTable = __webpack_require__(9);\n\t\n\tvar _lookupTable2 = _interopRequireDefault(_lookupTable);\n\t\n\tvar _renderer = __webpack_require__(10);\n\t\n\tvar _helper = __webpack_require__(11);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar ensureNodeInstance = function ensureNodeInstance(node) {\n\t    if (!(node instanceof _flattree.Node)) {\n\t        throw new Error('The node must be a Node object.');\n\t    }\n\t    return true;\n\t};\n\t\n\tvar InfiniteTree = function (_events$EventEmitter) {\n\t    _inherits(InfiniteTree, _events$EventEmitter);\n\t\n\t    // Creates new InfiniteTree object.\n\t\n\t    function InfiniteTree(el, options) {\n\t        _classCallCheck(this, InfiniteTree);\n\t\n\t        var _this = _possibleConstructorReturn(this, _events$EventEmitter.call(this));\n\t\n\t        _this.options = {\n\t            autoOpen: false,\n\t            containerView: 'div',\n\t            droppable: false,\n\t            el: null,\n\t            loadNodes: null,\n\t            noDataText: 'No data',\n\t            rowRenderer: _renderer.defaultRowRenderer,\n\t            selectable: true,\n\t            shouldSelectNode: null\n\t        };\n\t        _this.state = {\n\t            openNodes: [],\n\t            rootNode: null,\n\t            selectedNode: null\n\t        };\n\t        _this.clusterize = null;\n\t        _this.nodeTable = new _lookupTable2['default']();\n\t        _this.nodes = [];\n\t        _this.rows = [];\n\t        _this.scrollElement = null;\n\t        _this.contentElement = null;\n\t        _this.dragoverElement = null;\n\t        _this.contentListener = {\n\t            'click': function click(e) {\n\t                var itemTarget = null;\n\t                var handleToggler = false;\n\t\n\t                (0, _helper.stopPropagation)(e);\n\t\n\t                if (e.target && e.currentTarget) {\n\t                    itemTarget = e.target !== e.currentTarget ? e.target : null;\n\t                } else if (e.srcElement) {\n\t                    // IE8\n\t                    itemTarget = e.srcElement;\n\t                }\n\t\n\t                while (itemTarget && itemTarget.parentElement !== _this.contentElement) {\n\t                    if (itemTarget.className.indexOf('tree-toggler') >= 0) {\n\t                        handleToggler = true;\n\t                    }\n\t                    itemTarget = itemTarget.parentElement;\n\t                }\n\t\n\t                if (!itemTarget) {\n\t                    return;\n\t                }\n\t\n\t                var id = itemTarget.getAttribute('aria-id');\n\t                var node = _this.getNodeById(id);\n\t\n\t                if (!node) {\n\t                    return;\n\t                }\n\t\n\t                // Click on the toggler to open/close a tree node\n\t                if (handleToggler) {\n\t                    _this.toggleNode(node);\n\t                    return;\n\t                }\n\t\n\t                _this.selectNode(node);\n\t            },\n\t            // https://developer.mozilla.org/en-US/docs/Web/Events/dragenter\n\t            // The dragenter event is fired when a dragged element or text selection enters a valid drop target.\n\t            'dragenter': function dragenter(e) {\n\t                var itemTarget = null;\n\t\n\t                if (e.target && e.currentTarget) {\n\t                    itemTarget = e.target !== e.currentTarget ? e.target : null;\n\t                } else if (e.srcElement) {\n\t                    // IE8\n\t                    itemTarget = e.srcElement;\n\t                }\n\t\n\t                while (itemTarget && itemTarget.parentElement !== _this.contentElement) {\n\t                    itemTarget = itemTarget.parentElement;\n\t                }\n\t\n\t                if (!itemTarget) {\n\t                    return;\n\t                }\n\t\n\t                if (_this.dragoverElement !== itemTarget) {\n\t                    (0, _helper.removeClass)(_this.dragoverElement, 'highlight'); // remove 'highlight' class\n\t                    _this.dragoverElement = null;\n\t\n\t                    if (!itemTarget.hasAttribute('droppable')) {\n\t                        return;\n\t                    }\n\t\n\t                    var canDrop = !itemTarget.getAttribute('droppable').match(/false/i);\n\t                    if (canDrop) {\n\t                        (0, _helper.addClass)(itemTarget, 'highlight');\n\t                        _this.dragoverElement = itemTarget;\n\t                    }\n\t                }\n\t            },\n\t            // https://developer.mozilla.org/en-US/docs/Web/Events/dragend\n\t            // The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n\t            'dragend': function dragend(e) {\n\t                if (_this.dragoverElement) {\n\t                    (0, _helper.removeClass)(_this.dragoverElement, 'highlight'); // remove 'highlight' class\n\t                    _this.dragoverElement = null;\n\t                }\n\t            },\n\t            // https://developer.mozilla.org/en-US/docs/Web/Events/dragover\n\t            // The dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).\n\t            'dragover': function dragover(e) {\n\t                (0, _helper.preventDefault)(e);\n\t                e.dataTransfer.dropEffect = 'move';\n\t                return false;\n\t            },\n\t            // https://developer.mozilla.org/en-US/docs/Web/Events/drop\n\t            // The drop event is fired when an element or text selection is dropped on a valid drop target.\n\t            'drop': function drop(e) {\n\t                // prevent default action (open as link for some elements)\n\t                (0, _helper.preventDefault)(e);\n\t\n\t                if (_this.dragoverElement) {\n\t                    var id = _this.dragoverElement.getAttribute('aria-id');\n\t                    var node = _this.getNodeById(id);\n\t\n\t                    (0, _helper.removeClass)(_this.dragoverElement, 'highlight');\n\t                    _this.dragoverElement = null;\n\t\n\t                    _this.emit('dropNode', node, e);\n\t                }\n\t            }\n\t        };\n\t\n\t\n\t        if ((0, _helper.isDOMElement)(el)) {\n\t            options.el = el;\n\t        } else {\n\t            options = el;\n\t        }\n\t\n\t        // Assign options\n\t        _this.options = (0, _helper.extend)({}, _this.options, options);\n\t\n\t        if (!_this.options.el) {\n\t            console.error('Failed to initialize infinite-tree: el is not specified.', options);\n\t            return _possibleConstructorReturn(_this);\n\t        }\n\t\n\t        _this.create();\n\t\n\t        // Load tree data if it's provided\n\t        if (options.data) {\n\t            _this.loadData(options.data);\n\t        }\n\t        return _this;\n\t    }\n\t\n\t    InfiniteTree.prototype.create = function create() {\n\t        var _this2 = this;\n\t\n\t        if (!this.options.el) {\n\t            throw new Error('The element option is not specified.');\n\t        }\n\t\n\t        var tag = null;\n\t\n\t        this.scrollElement = document.createElement('div');\n\t\n\t        if (this.options.containerView === 'table') {\n\t            var tableElement = document.createElement('table');\n\t            tableElement.className = (0, _helper.classNames)('infinite-tree', 'infinite-tree-table');\n\t            var contentElement = document.createElement('tbody');\n\t            tableElement.appendChild(contentElement);\n\t            this.scrollElement.appendChild(tableElement);\n\t            this.contentElement = contentElement;\n\t\n\t            // The tag name for supporting elements\n\t            tag = 'tr';\n\t        } else {\n\t            var _contentElement = document.createElement('div');\n\t            this.scrollElement.appendChild(_contentElement);\n\t            this.contentElement = _contentElement;\n\t\n\t            // The tag name for supporting elements\n\t            tag = 'div';\n\t        }\n\t\n\t        this.scrollElement.className = (0, _helper.classNames)('infinite-tree', 'infinite-tree-scroll');\n\t        this.contentElement.className = (0, _helper.classNames)('infinite-tree', 'infinite-tree-content');\n\t\n\t        this.options.el.appendChild(this.scrollElement);\n\t\n\t        this.clusterize = new _clusterize2['default']({\n\t            tag: tag,\n\t            rows: [],\n\t            scrollElem: this.scrollElement,\n\t            contentElem: this.contentElement,\n\t            no_data_text: this.options.noDataText,\n\t            no_data_class: 'infinite-tree-no-data',\n\t            callbacks: {\n\t                // Will be called right before replacing previous cluster with new one.\n\t                clusterWillChange: function clusterWillChange() {},\n\t                // Will be called right after replacing previous cluster with new one.\n\t                clusterChanged: function clusterChanged() {\n\t                    // Emit the update event\n\t                    _this2.emit('update');\n\t                },\n\t                // Will be called on scrolling. Returns progress position.\n\t                scrollingProgress: function scrollingProgress(progress) {\n\t                    // Emit the scrollProgress event\n\t                    _this2.emit('scrollProgress', progress);\n\t                }\n\t            }\n\t        });\n\t\n\t        (0, _helper.addEventListener)(this.contentElement, 'click', this.contentListener.click);\n\t\n\t        if (this.options.droppable) {\n\t            (0, _helper.addEventListener)(document, 'dragend', this.contentListener.dragend);\n\t            (0, _helper.addEventListener)(this.contentElement, 'dragenter', this.contentListener.dragenter);\n\t            (0, _helper.addEventListener)(this.contentElement, 'dragover', this.contentListener.dragover);\n\t            (0, _helper.addEventListener)(this.contentElement, 'drop', this.contentListener.drop);\n\t        }\n\t    };\n\t\n\t    InfiniteTree.prototype.destroy = function destroy() {\n\t        (0, _helper.removeEventListener)(this.contentElement, 'click', this.contentListener);\n\t        if (this.options.droppable) {\n\t            (0, _helper.removeEventListener)(document, 'dragend', this.contentListener.dragend);\n\t            (0, _helper.removeEventListener)(this.contentElement, 'dragenter', this.contentListener.dragenter);\n\t            (0, _helper.removeEventListener)(this.contentElement, 'dragover', this.contentListener.dragover);\n\t            (0, _helper.removeEventListener)(this.contentElement, 'drop', this.contentListener.drop);\n\t        }\n\t\n\t        this.clear();\n\t\n\t        if (this.clusterize) {\n\t            this.clusterize.destroy(true); // True to remove all data from the list\n\t            this.clusterize = null;\n\t        }\n\t\n\t        // Remove all child nodes\n\t        while (this.contentElement.firstChild) {\n\t            this.contentElement.removeChild(this.contentElement.firstChild);\n\t        }\n\t        while (this.scrollElement.firstChild) {\n\t            this.scrollElement.removeChild(this.scrollElement.firstChild);\n\t        }\n\t        if (this.options.el) {\n\t            var containerElement = this.options.el;\n\t            while (containerElement.firstChild) {\n\t                containerElement.removeChild(containerElement.firstChild);\n\t            }\n\t        }\n\t        this.contentElement = null;\n\t        this.scrollElement = null;\n\t    };\n\t    // Adds an array of new child nodes to a parent node at the specified index.\n\t    // * If the parent is null or undefined, inserts new childs at the specified index in the top-level.\n\t    // * If the parent has children, the method adds the new child to it at the specified index.\n\t    // * If the parent does not have children, the method adds the new child to the parent.\n\t    // * If the index value is greater than or equal to the number of children in the parent, the method adds the child at the end of the children.\n\t    // @param {Array} newNodes An array of new child nodes.\n\t    // @param {number} [index] The 0-based index of where to insert the child node.\n\t    // @param {Node} parentNode The Node object that defines the parent node.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.addChildNodes = function addChildNodes(newNodes, index, parentNode) {\n\t        var _this3 = this;\n\t\n\t        newNodes = [].concat(newNodes || []); // Ensure array\n\t        if (newNodes.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        if ((typeof index === 'undefined' ? 'undefined' : _typeof(index)) === 'object') {\n\t            // The 'object' type might be Node or null\n\t            parentNode = index || this.state.rootNode; // Defaults to rootNode if not specified\n\t            index = parentNode.children.length;\n\t        } else {\n\t            parentNode = parentNode || this.state.rootNode; // Defaults to rootNode if not specified\n\t        }\n\t\n\t        ensureNodeInstance(parentNode);\n\t\n\t        // Assign parent\n\t        newNodes.forEach(function (newNode) {\n\t            newNode.parent = parentNode;\n\t        });\n\t\n\t        // Insert new child node at the specified index\n\t        parentNode.children.splice.apply(parentNode.children, [index, 0].concat(newNodes));\n\t\n\t        // Get the index of the first new node within the array of child nodes\n\t        index = parentNode.children.indexOf(newNodes[0]);\n\t\n\t        var deleteCount = parentNode.state.total;\n\t        var nodes = (0, _flattree.flatten)(parentNode.children, { openNodes: this.state.openNodes });\n\t        var rows = nodes.map(function (node) {\n\t            return _this3.options.rowRenderer(node, _this3.options);\n\t        });\n\t\n\t        if (parentNode === this.state.rootNode) {\n\t            this.nodes = nodes;\n\t            this.rows = rows;\n\t        } else {\n\t            var parentOffset = this.nodes.indexOf(parentNode);\n\t            if (parentOffset >= 0) {\n\t                // Update nodes & rows\n\t                this.nodes.splice.apply(this.nodes, [parentOffset + 1, deleteCount].concat(nodes));\n\t                this.rows.splice.apply(this.rows, [parentOffset + 1, deleteCount].concat(rows));\n\t\n\t                // Update the row corresponding to the parent node\n\t                this.rows[parentOffset] = this.options.rowRenderer(parentNode, this.options);\n\t            }\n\t        }\n\t\n\t        // Update the lookup table with newly added nodes\n\t        parentNode.children.slice(index).forEach(function (childNode) {\n\t            _this3.flattenNode(childNode).forEach(function (node) {\n\t                if (node.id !== undefined) {\n\t                    _this3.nodeTable.set(node.id, node);\n\t                }\n\t            });\n\t        });\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t\n\t        return true;\n\t    };\n\t    // Adds a new child node to the end of the list of children of a specified parent node.\n\t    // * If the parent is null or undefined, inserts the child at the specified index in the top-level.\n\t    // * If the parent has children, the method adds the child as the last child.\n\t    // * If the parent does not have children, the method adds the child to the parent.\n\t    // @param {Object} newNode The new child node.\n\t    // @param {Node} parentNode The Node object that defines the parent node.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.appendChildNode = function appendChildNode(newNode, parentNode) {\n\t        // Defaults to rootNode if the parentNode is not specified\n\t        parentNode = parentNode || this.state.rootNode;\n\t        ensureNodeInstance(parentNode);\n\t        var index = parentNode.children.length;\n\t        var newNodes = [].concat(newNode || []); // Ensure array\n\t        return this.addChildNodes(newNodes, index, parentNode);\n\t    };\n\t    // Clears the tree.\n\t\n\t\n\t    InfiniteTree.prototype.clear = function clear() {\n\t        this.clusterize.clear();\n\t        this.nodeTable.clear();\n\t        this.nodes = [];\n\t        this.rows = [];\n\t        this.state.openNodes = [];\n\t        this.state.rootNode = null;\n\t        this.state.selectedNode = null;\n\t    };\n\t    // Closes a node to hide its children.\n\t    // @param {Node} node The Node object.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.closeNode = function closeNode(node) {\n\t        ensureNodeInstance(node);\n\t\n\t        // Retrieve node index\n\t        var nodeIndex = this.nodes.indexOf(node);\n\t        if (nodeIndex < 0) {\n\t            throw new Error('Invalid node index');\n\t        }\n\t\n\t        // Check if the closeNode action can be performed\n\t        if (this.state.openNodes.indexOf(node) < 0) {\n\t            return false;\n\t        }\n\t\n\t        // Keep selected node unchanged if \"node\" is equal to \"this.state.selectedNode\"\n\t        if (this.state.selectedNode && this.state.selectedNode !== node) {\n\t            // row #0 - node.0         => parent node (total=4)\n\t            // row #1   - node.0.0     => close this node; next selected node (total=2)\n\t            // row #2       node.0.0.0 => selected node (total=0)\n\t            // row #3       node.0.0.1\n\t            // row #4     node.0.1\n\t            var selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n\t            var rangeFrom = nodeIndex + 1;\n\t            var rangeTo = nodeIndex + node.state.total;\n\t\n\t            if (rangeFrom <= selectedIndex && selectedIndex <= rangeTo) {\n\t                this.selectNode(node);\n\t            }\n\t        }\n\t\n\t        node.state.open = false; // Set the open state to false\n\t        var openNodes = this.state.openNodes.filter(function (node) {\n\t            return node.hasChildren() && node.state.open;\n\t        });\n\t        this.state.openNodes = openNodes;\n\t\n\t        var deleteCount = node.state.total;\n\t\n\t        // Subtract the deleteCount for all ancestors (parent, grandparent, etc.) of the current node\n\t        for (var p = node; p !== null; p = p.parent) {\n\t            p.state.total = p.state.total - deleteCount;\n\t        }\n\t\n\t        // Update nodes & rows\n\t        this.nodes.splice(nodeIndex + 1, deleteCount);\n\t        this.rows.splice(nodeIndex + 1, deleteCount);\n\t\n\t        // Update the row corresponding to the node\n\t        this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\t\n\t        // Emit the 'closeNode' event\n\t        this.emit('closeNode', node);\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t\n\t        return true;\n\t    };\n\t    // Flattens all child nodes of a parent node by performing full tree traversal using child-parent link.\n\t    // No recursion or stack is involved.\n\t    // @param {Node} parentNode The Node object that defines the parent node.\n\t    // @return {array} Returns an array of Node objects containing all the child nodes of the parent node.\n\t\n\t\n\t    InfiniteTree.prototype.flattenChildNodes = function flattenChildNodes(parentNode) {\n\t        // Defaults to rootNode if the parentNode is not specified\n\t        parentNode = parentNode || this.state.rootNode;\n\t\n\t        ensureNodeInstance(parentNode);\n\t\n\t        var list = [];\n\t\n\t        // Ignore parent node\n\t        var node = parentNode.getFirstChild();\n\t        while (node) {\n\t            list.push(node);\n\t            if (node.hasChildren()) {\n\t                node = node.getFirstChild();\n\t            } else {\n\t                // find the parent level\n\t                while (node.getNextSibling() === null && node.parent !== parentNode) {\n\t                    // use child-parent link to get to the parent level\n\t                    node = node.getParent();\n\t                }\n\t\n\t                // Get next sibling\n\t                node = node.getNextSibling();\n\t            }\n\t        }\n\t\n\t        return list;\n\t    };\n\t    // Flattens a node by performing full tree traversal using child-parent link.\n\t    // No recursion or stack is involved.\n\t    // @param {Node} node The Node object.\n\t    // @return {array} Returns a flattened list of Node objects.\n\t\n\t\n\t    InfiniteTree.prototype.flattenNode = function flattenNode(node) {\n\t        return [node].concat(this.flattenChildNodes(node));\n\t    };\n\t    // Gets a list of child nodes.\n\t    // @param {Node} [parentNode] The Node object that defines the parent node. If null or undefined, returns a list of top level nodes.\n\t    // @return {array} Returns an array of Node objects containing all the child nodes of the parent node.\n\t\n\t\n\t    InfiniteTree.prototype.getChildNodes = function getChildNodes(parentNode) {\n\t        // Defaults to rootNode if the parentNode is not specified\n\t        parentNode = parentNode || this.state.rootNode;\n\t\n\t        ensureNodeInstance(parentNode);\n\t\n\t        return parentNode.children;\n\t    };\n\t    // Gets a node by its unique id. This assumes that you have given the nodes in the data a unique id.\n\t    // @param {string|number} id An unique node id. A null value will be returned if the id doesn't match.\n\t    // @return {Node} Returns a node the matches the id, null otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.getNodeById = function getNodeById(id) {\n\t        var node = this.nodeTable.get(id);\n\t        if (!node) {\n\t            // Find the first node that matches the id\n\t            node = this.nodes.filter(function (node) {\n\t                return node.id === id;\n\t            })[0];\n\t            if (!node) {\n\t                return null;\n\t            }\n\t            this.nodeTable.set(node.id, node);\n\t        }\n\t        return node;\n\t    };\n\t    // Gets an array of open nodes.\n\t    // @return {array} Returns an array of Node objects containing open nodes.\n\t\n\t\n\t    InfiniteTree.prototype.getOpenNodes = function getOpenNodes() {\n\t        // returns a shallow copy of an array into a new array object.\n\t        return this.state.openNodes.slice();\n\t    };\n\t    // Gets the root node.\n\t    // @return {Node} Returns the root node, or null if empty.\n\t\n\t\n\t    InfiniteTree.prototype.getRootNode = function getRootNode() {\n\t        return this.state.rootNode;\n\t    };\n\t    // Gets the selected node.\n\t    // @return {Node} Returns the selected node, or null if not selected.\n\t\n\t\n\t    InfiniteTree.prototype.getSelectedNode = function getSelectedNode() {\n\t        return this.state.selectedNode;\n\t    };\n\t    // Inserts the specified node after the reference node.\n\t    // @param {Object} newNode The new sibling node.\n\t    // @param {Node} referenceNode The Node object that defines the reference node.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.insertNodeAfter = function insertNodeAfter(newNode, referenceNode) {\n\t        ensureNodeInstance(referenceNode);\n\t        var parentNode = referenceNode.getParent();\n\t        var index = parentNode.children.indexOf(referenceNode) + 1;\n\t        var newNodes = [].concat(newNode || []); // Ensure array\n\t        return this.addChildNodes(newNodes, index, parentNode);\n\t    };\n\t    // Inserts the specified node before the reference node.\n\t    // @param {Object} newNode The new sibling node.\n\t    // @param {Node} referenceNode The Node object that defines the reference node.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.insertNodeBefore = function insertNodeBefore(newNode, referenceNode) {\n\t        ensureNodeInstance(referenceNode);\n\t        var parentNode = referenceNode.getParent();\n\t        var index = parentNode.children.indexOf(referenceNode);\n\t        var newNodes = [].concat(newNode || []); // Ensure array\n\t        return this.addChildNodes(newNodes, index, parentNode);\n\t    };\n\t    // Loads data in the tree.\n\t    // @param {object|array} data The data is an object or array of objects that defines the node.\n\t\n\t\n\t    InfiniteTree.prototype.loadData = function loadData() {\n\t        var _this4 = this;\n\t\n\t        var data = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\t\n\t        this.nodes = (0, _flattree.flatten)(data, { openAllNodes: this.options.autoOpen });\n\t\n\t        // Clear lookup table\n\t        this.nodeTable.clear();\n\t\n\t        this.state.openNodes = this.nodes.filter(function (node) {\n\t            return node.hasChildren() && node.state.open;\n\t        });\n\t        this.state.rootNode = function () {\n\t            var node = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t\n\t            // Finding the root node\n\t            while (node && node.parent !== null) {\n\t                node = node.parent;\n\t            }\n\t            return node;\n\t        }(this.nodes[0]);\n\t        this.state.selectedNode = null;\n\t\n\t        // Update the lookup table with newly added nodes\n\t        this.flattenChildNodes(this.state.rootNode).forEach(function (node) {\n\t            if (node.id !== undefined) {\n\t                _this4.nodeTable.set(node.id, node);\n\t            }\n\t        });\n\t\n\t        // Update rows\n\t        this.rows = this.nodes.map(function (node) {\n\t            return _this4.options.rowRenderer(node, _this4.options);\n\t        });\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t    };\n\t    // Opens a node to display its children.\n\t    // @param {Node} node The Node object.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.openNode = function openNode(node) {\n\t        var _this5 = this;\n\t\n\t        ensureNodeInstance(node);\n\t\n\t        // Retrieve node index\n\t        var nodeIndex = this.nodes.indexOf(node);\n\t        if (nodeIndex < 0) {\n\t            throw new Error('Invalid node index');\n\t        }\n\t\n\t        // Check if the openNode action can be performed\n\t        if (this.state.openNodes.indexOf(node) >= 0) {\n\t            return false;\n\t        }\n\t\n\t        if (!node.hasChildren() && node.loadOnDemand) {\n\t            if (typeof this.options.loadNodes !== 'function') {\n\t                return false;\n\t            }\n\t\n\t            // Set loading state to true\n\t            node.state.loading = true;\n\t            this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\t\n\t            // Updates list with new data\n\t            this.update();\n\t\n\t            this.options.loadNodes(node, function (err, nodes) {\n\t                // Set loading state to false\n\t                node.state.loading = false;\n\t                _this5.rows[nodeIndex] = _this5.options.rowRenderer(node, _this5.options);\n\t\n\t                // Updates list with new data\n\t                _this5.update();\n\t\n\t                if (err) {\n\t                    return;\n\t                }\n\t                if (!nodes) {\n\t                    return;\n\t                }\n\t\n\t                nodes = [].concat(nodes || []); // Ensure array\n\t                if (nodes.length === 0) {\n\t                    return;\n\t                }\n\t\n\t                // Append child nodes\n\t                nodes.forEach(function (childNode) {\n\t                    _this5.appendChildNode(childNode, node);\n\t                });\n\t\n\t                // Ensure the node has children to prevent from infinite loop\n\t                if (node.hasChildren()) {\n\t                    // Call openNode again\n\t                    _this5.openNode(node);\n\t                }\n\t            });\n\t\n\t            return false;\n\t        }\n\t\n\t        node.state.open = true; // Set node.state.open to true\n\t        var openNodes = [node].concat(this.state.openNodes); // the most recently used items first\n\t        this.state.openNodes = openNodes;\n\t\n\t        var nodes = (0, _flattree.flatten)(node.children, { openNodes: this.state.openNodes });\n\t        var rows = nodes.map(function (node) {\n\t            return _this5.options.rowRenderer(node, _this5.options);\n\t        });\n\t\n\t        // Update nodes & rows\n\t        this.nodes.splice.apply(this.nodes, [nodeIndex + 1, 0].concat(nodes));\n\t        this.rows.splice.apply(this.rows, [nodeIndex + 1, 0].concat(rows));\n\t\n\t        // Update the row corresponding to the node\n\t        this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\t\n\t        // Add all child nodes to the lookup table if the first child does not exist in the lookup table\n\t        if (nodes.length > 0 && !this.nodeTable.get(nodes[0])) {\n\t            nodes.forEach(function (node) {\n\t                if (node.id !== undefined) {\n\t                    _this5.nodeTable.set(node.id, node);\n\t                }\n\t            });\n\t        }\n\t\n\t        // Emit the 'openNode' event\n\t        this.emit('openNode', node);\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t\n\t        return true;\n\t    };\n\t    // Removes all child nodes from a parent node.\n\t    // @param {Node} parentNode The Node object that defines the parent node.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.removeChildNodes = function removeChildNodes(parentNode) {\n\t        var _this6 = this;\n\t\n\t        ensureNodeInstance(parentNode);\n\t\n\t        if (parentNode.children.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        var parentNodeIndex = this.nodes.indexOf(parentNode);\n\t\n\t        // Update selected node\n\t        if (parentNodeIndex >= 0 && this.state.selectedNode) {\n\t            // row #0 - node.0         => parent node (total=4)\n\t            // row #1   - node.0.0\n\t            // row #2       node.0.0.0 => current selected node\n\t            // row #3       node.0.0.1\n\t            // row #4     node.0.1\n\t            var selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n\t            var rangeFrom = parentNodeIndex + 1;\n\t            var rangeTo = parentNodeIndex + parentNode.state.total;\n\t\n\t            if (rangeFrom <= selectedIndex && selectedIndex <= rangeTo) {\n\t                this.selectNode(parentNode);\n\t            }\n\t        }\n\t\n\t        // Update parent node\n\t        parentNode.children = [];\n\t        parentNode.state.open = parentNode.state.open && parentNode.children.length > 0;\n\t\n\t        // Get the number of nodes to be removed\n\t        var deleteCount = parentNode.state.total;\n\t\n\t        // Subtract the deleteCount for all ancestors (parent, grandparent, etc.) of the current node\n\t        for (var p = parentNode; p !== null; p = p.parent) {\n\t            p.state.total = p.state.total - deleteCount;\n\t        }\n\t\n\t        if (parentNodeIndex >= 0) {\n\t            // Update nodes & rows\n\t            this.nodes.splice(parentNodeIndex + 1, deleteCount);\n\t            this.rows.splice(parentNodeIndex + 1, deleteCount);\n\t\n\t            // Update the row corresponding to the parent node\n\t            this.rows[parentNodeIndex] = this.options.rowRenderer(parentNode, this.options);\n\t        }\n\t\n\t        {\n\t            (function () {\n\t                // Update open nodes and lookup table\n\t                var childNodes = _this6.flattenChildNodes(parentNode);\n\t\n\t                _this6.state.openNodes = _this6.state.openNodes.filter(function (node) {\n\t                    return childNodes.indexOf(node) < 0;\n\t                });\n\t\n\t                childNodes.forEach(function (node) {\n\t                    _this6.nodeTable.unset(node.id);\n\t                });\n\t            })();\n\t        }\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t\n\t        return true;\n\t    };\n\t    // Removes a node and all of its child nodes.\n\t    // @param {Node} node The Node object.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.removeNode = function removeNode(node) {\n\t        var _this7 = this;\n\t\n\t        ensureNodeInstance(node);\n\t\n\t        var parentNode = node.parent;\n\t        if (!parentNode) {\n\t            return false;\n\t        }\n\t\n\t        // Retrieve node index\n\t        var nodeIndex = this.nodes.indexOf(node);\n\t        var parentNodeIndex = this.nodes.indexOf(parentNode);\n\t\n\t        // Update selected node\n\t        if (nodeIndex >= 0 && this.state.selectedNode) {\n\t            // row #0 - node.0         => parent node (total=4)\n\t            // row #1   - node.0.0     => remove this node (total=2)\n\t            // row #2       node.0.0.0 => current selected node (total=0)\n\t            // row #3       node.0.0.1\n\t            // row #4     node.0.1     => next selected node (total=0)\n\t            var selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n\t            var rangeFrom = nodeIndex;\n\t            var rangeTo = nodeIndex + node.state.total + 1;\n\t\n\t            if (rangeFrom <= selectedIndex && selectedIndex <= rangeTo) {\n\t                // Change the selected node in the following order:\n\t                // 1. next sibling node\n\t                // 2. previous sibling node\n\t                // 3. parent node\n\t                var selectedNode = node.getNextSibling() || node.getPreviousSibling() || node.getParent();\n\t                this.selectNode(selectedNode);\n\t            }\n\t        }\n\t\n\t        // Update parent node\n\t        parentNode.children.splice(parentNode.children.indexOf(node), 1);\n\t        parentNode.state.open = parentNode.state.open && parentNode.children.length > 0;\n\t\n\t        // Get the number of nodes to be removed\n\t        var deleteCount = node.state.total + 1;\n\t\n\t        // Subtract the deleteCount for all ancestors (parent, grandparent, etc.) of the current node\n\t        for (var p = parentNode; p !== null; p = p.parent) {\n\t            p.state.total = p.state.total - deleteCount;\n\t        }\n\t\n\t        if (nodeIndex >= 0) {\n\t            // Update nodes & rows\n\t            this.nodes.splice(nodeIndex, deleteCount);\n\t            this.rows.splice(nodeIndex, deleteCount);\n\t        }\n\t\n\t        // Update the row corresponding to the parent node\n\t        if (parentNodeIndex >= 0) {\n\t            this.rows[parentNodeIndex] = this.options.rowRenderer(parentNode, this.options);\n\t        }\n\t\n\t        {\n\t            (function () {\n\t                // Update open nodes and lookup table\n\t                var nodes = _this7.flattenNode(node);\n\t\n\t                _this7.state.openNodes = _this7.state.openNodes.filter(function (node) {\n\t                    return nodes.indexOf(node) < 0;\n\t                });\n\t\n\t                nodes.forEach(function (node) {\n\t                    _this7.nodeTable.unset(node.id);\n\t                });\n\t            })();\n\t        }\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t\n\t        return true;\n\t    };\n\t    // Sets the current scroll position to this node.\n\t    // @param {Node} node The Node object.\n\t    // @return {number} Returns the vertical scroll position, or -1 on error.\n\t\n\t\n\t    InfiniteTree.prototype.scrollToNode = function scrollToNode(node) {\n\t        ensureNodeInstance(node);\n\t\n\t        // Retrieve node index\n\t        var nodeIndex = this.nodes.indexOf(node);\n\t        if (nodeIndex < 0) {\n\t            return -1;\n\t        }\n\t        if (!this.contentElement) {\n\t            return -1;\n\t        }\n\t        // Get the offset height of the first child element that contains the \"tree-item\" class\n\t        var firstChild = this.contentElement.querySelectorAll('.tree-item')[0];\n\t        var rowHeight = firstChild && firstChild.offsetHeight || 0;\n\t        return this.scrollTop(nodeIndex * rowHeight);\n\t    };\n\t    // Gets (or sets) the current vertical position of the scroll bar.\n\t    // @param {number} [value] An integer that indicates the new position to set the scroll bar to.\n\t    // @return {number} Returns the vertical scroll position.\n\t\n\t\n\t    InfiniteTree.prototype.scrollTop = function scrollTop(value) {\n\t        if (!this.scrollElement) {\n\t            return 0;\n\t        }\n\t        if (value !== undefined) {\n\t            this.scrollElement.scrollTop = Number(value);\n\t        }\n\t        return this.scrollElement.scrollTop;\n\t    };\n\t    // Selects a node.\n\t    // @param {Node} node The Node object. If null or undefined, deselects the current node.\n\t    // @return {boolean} Returns true on success, false otherwise.\n\t\n\t\n\t    InfiniteTree.prototype.selectNode = function selectNode() {\n\t        var node = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t        var _options = this.options;\n\t        var selectable = _options.selectable;\n\t        var shouldSelectNode = _options.shouldSelectNode;\n\t\n\t\n\t        if (!selectable) {\n\t            return false;\n\t        }\n\t        if (typeof shouldSelectNode === 'function' && !shouldSelectNode(node)) {\n\t            return false;\n\t        }\n\t\n\t        if (node === null) {\n\t            // Deselect the current node\n\t            if (this.state.selectedNode) {\n\t                var selectedNode = this.state.selectedNode;\n\t                var selectedIndex = this.nodes.indexOf(selectedNode);\n\t\n\t                selectedNode.state.selected = false;\n\t                this.rows[selectedIndex] = this.options.rowRenderer(selectedNode, this.options);\n\t                this.state.selectedNode = null;\n\t\n\t                // Emit the 'selectNode' event\n\t                this.emit('selectNode', null);\n\t\n\t                // Updates list with new data\n\t                this.update();\n\t\n\t                return true;\n\t            }\n\t\n\t            return false;\n\t        }\n\t\n\t        ensureNodeInstance(node);\n\t\n\t        // Retrieve node index\n\t        var nodeIndex = this.nodes.indexOf(node);\n\t        if (nodeIndex < 0) {\n\t            throw new Error('Invalid node index');\n\t        }\n\t\n\t        // Select this node\n\t        if (this.state.selectedNode !== node) {\n\t            node.state.selected = true;\n\t\n\t            // Update the row corresponding to the node\n\t            this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\t        }\n\t\n\t        // Deselect the current node\n\t        if (this.state.selectedNode) {\n\t            var _selectedNode = this.state.selectedNode;\n\t            var _selectedIndex = this.nodes.indexOf(_selectedNode);\n\t            _selectedNode.state.selected = false;\n\t            this.rows[_selectedIndex] = this.options.rowRenderer(_selectedNode, this.options);\n\t        }\n\t\n\t        if (this.state.selectedNode !== node) {\n\t            this.state.selectedNode = node;\n\t\n\t            // Emit the 'selectNode' event\n\t            this.emit('selectNode', node);\n\t        } else {\n\t            this.state.selectedNode = null;\n\t\n\t            // Emit the 'selectNode' event\n\t            this.emit('selectNode', null);\n\t        }\n\t\n\t        // Updates list with new data\n\t        this.update();\n\t\n\t        return true;\n\t    };\n\t    // Toggles a node to display or hide its children.\n\t    // @param {Node} node The Node object.\n\t\n\t\n\t    InfiniteTree.prototype.toggleNode = function toggleNode(node) {\n\t        if (this.state.openNodes.indexOf(node) >= 0) {\n\t            // close node\n\t            this.closeNode(node);\n\t        } else {\n\t            // open node\n\t            this.openNode(node);\n\t        }\n\t    };\n\t    // Serializes the current state of a node to a JSON string.\n\t    // @param {Node} node The Node object. If null, returns the whole tree.\n\t    // @return {string} Returns a JSON string represented the tree.\n\t\n\t\n\t    InfiniteTree.prototype.toString = function toString() {\n\t        var node = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t\n\t        var traverse = function traverse(node) {\n\t            var s = '[';\n\t            if (node && node.children) {\n\t                var _loop = function _loop(i) {\n\t                    var list = [];\n\t                    s = s + '{';\n\t                    Object.keys(node).forEach(function (key) {\n\t                        var value = node[key];\n\t                        if (key === 'parent') {\n\t                            // ignore parent\n\t                            return;\n\t                        }\n\t                        if (key === 'children') {\n\t                            // traverse child nodes\n\t                            list.push('\"' + key + '\":' + traverse(node.children[i]));\n\t                            return;\n\t                        }\n\t                        if (typeof value === 'string' || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n\t                            list.push('\"' + key + '\":' + JSON.stringify(value));\n\t                        } else {\n\t                            // primitive types\n\t                            list.push('\"' + key + '\":' + value);\n\t                        }\n\t                    });\n\t                    s = s + list.join(',');\n\t                    s = s + '}' + (i === node.children.length - 1 ? '' : ',');\n\t                };\n\t\n\t                for (var i = 0; i < node.children.length; ++i) {\n\t                    _loop(i);\n\t                }\n\t            }\n\t            s = s + ']';\n\t            return s;\n\t        };\n\t\n\t        if (!node) {\n\t            node = this.state.rootNode;\n\t        }\n\t\n\t        return traverse(node);\n\t    };\n\t    // Updates the tree.\n\t\n\t\n\t    InfiniteTree.prototype.update = function update() {\n\t        // Update the list with new data\n\t        this.clusterize.update(this.rows);\n\t    };\n\t    // Updates the data of a node.\n\t    // @param {Node} node The Node object.\n\t    // @param {Object} data The data object.\n\t\n\t\n\t    InfiniteTree.prototype.updateNode = function updateNode(node, data) {\n\t        ensureNodeInstance(node);\n\t\n\t        // Clone a new one\n\t        data = (0, _helper.extend)({}, data);\n\t\n\t        // Ignore keys: children, parent, and state\n\t        delete data.children;\n\t        delete data.parent;\n\t        delete data.state;\n\t\n\t        node = (0, _helper.extend)(node, data);\n\t\n\t        // Retrieve node index\n\t        var nodeIndex = this.nodes.indexOf(node);\n\t        if (nodeIndex >= 0) {\n\t            // Update the row corresponding to the node\n\t            this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\t\n\t            // Updates list with new data\n\t            this.update();\n\t        }\n\t    };\n\t\n\t    return InfiniteTree;\n\t}(_events2['default'].EventEmitter);\n\t\n\texports['default'] = InfiniteTree;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\tfunction EventEmitter() {\n\t  this._events = this._events || {};\n\t  this._maxListeners = this._maxListeners || undefined;\n\t}\n\tmodule.exports = EventEmitter;\n\t\n\t// Backwards-compat with node 0.10.x\n\tEventEmitter.EventEmitter = EventEmitter;\n\t\n\tEventEmitter.prototype._events = undefined;\n\tEventEmitter.prototype._maxListeners = undefined;\n\t\n\t// By default EventEmitters will print a warning if more than 10 listeners are\n\t// added to it. This is a useful default which helps finding memory leaks.\n\tEventEmitter.defaultMaxListeners = 10;\n\t\n\t// Obviously not all Emitters should be limited to 10. This function allows\n\t// that to be increased. Set to zero for unlimited.\n\tEventEmitter.prototype.setMaxListeners = function(n) {\n\t  if (!isNumber(n) || n < 0 || isNaN(n))\n\t    throw TypeError('n must be a positive number');\n\t  this._maxListeners = n;\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.emit = function(type) {\n\t  var er, handler, len, args, i, listeners;\n\t\n\t  if (!this._events)\n\t    this._events = {};\n\t\n\t  // If there is no 'error' event listener then throw.\n\t  if (type === 'error') {\n\t    if (!this._events.error ||\n\t        (isObject(this._events.error) && !this._events.error.length)) {\n\t      er = arguments[1];\n\t      if (er instanceof Error) {\n\t        throw er; // Unhandled 'error' event\n\t      }\n\t      throw TypeError('Uncaught, unspecified \"error\" event.');\n\t    }\n\t  }\n\t\n\t  handler = this._events[type];\n\t\n\t  if (isUndefined(handler))\n\t    return false;\n\t\n\t  if (isFunction(handler)) {\n\t    switch (arguments.length) {\n\t      // fast cases\n\t      case 1:\n\t        handler.call(this);\n\t        break;\n\t      case 2:\n\t        handler.call(this, arguments[1]);\n\t        break;\n\t      case 3:\n\t        handler.call(this, arguments[1], arguments[2]);\n\t        break;\n\t      // slower\n\t      default:\n\t        args = Array.prototype.slice.call(arguments, 1);\n\t        handler.apply(this, args);\n\t    }\n\t  } else if (isObject(handler)) {\n\t    args = Array.prototype.slice.call(arguments, 1);\n\t    listeners = handler.slice();\n\t    len = listeners.length;\n\t    for (i = 0; i < len; i++)\n\t      listeners[i].apply(this, args);\n\t  }\n\t\n\t  return true;\n\t};\n\t\n\tEventEmitter.prototype.addListener = function(type, listener) {\n\t  var m;\n\t\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  if (!this._events)\n\t    this._events = {};\n\t\n\t  // To avoid recursion in the case that type === \"newListener\"! Before\n\t  // adding it to the listeners, first emit \"newListener\".\n\t  if (this._events.newListener)\n\t    this.emit('newListener', type,\n\t              isFunction(listener.listener) ?\n\t              listener.listener : listener);\n\t\n\t  if (!this._events[type])\n\t    // Optimize the case of one listener. Don't need the extra array object.\n\t    this._events[type] = listener;\n\t  else if (isObject(this._events[type]))\n\t    // If we've already got an array, just append.\n\t    this._events[type].push(listener);\n\t  else\n\t    // Adding the second element, need to change to array.\n\t    this._events[type] = [this._events[type], listener];\n\t\n\t  // Check for listener leak\n\t  if (isObject(this._events[type]) && !this._events[type].warned) {\n\t    if (!isUndefined(this._maxListeners)) {\n\t      m = this._maxListeners;\n\t    } else {\n\t      m = EventEmitter.defaultMaxListeners;\n\t    }\n\t\n\t    if (m && m > 0 && this._events[type].length > m) {\n\t      this._events[type].warned = true;\n\t      console.error('(node) warning: possible EventEmitter memory ' +\n\t                    'leak detected. %d listeners added. ' +\n\t                    'Use emitter.setMaxListeners() to increase limit.',\n\t                    this._events[type].length);\n\t      if (typeof console.trace === 'function') {\n\t        // not supported in IE 10\n\t        console.trace();\n\t      }\n\t    }\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\t\n\tEventEmitter.prototype.once = function(type, listener) {\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  var fired = false;\n\t\n\t  function g() {\n\t    this.removeListener(type, g);\n\t\n\t    if (!fired) {\n\t      fired = true;\n\t      listener.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  g.listener = listener;\n\t  this.on(type, g);\n\t\n\t  return this;\n\t};\n\t\n\t// emits a 'removeListener' event iff the listener was removed\n\tEventEmitter.prototype.removeListener = function(type, listener) {\n\t  var list, position, length, i;\n\t\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  if (!this._events || !this._events[type])\n\t    return this;\n\t\n\t  list = this._events[type];\n\t  length = list.length;\n\t  position = -1;\n\t\n\t  if (list === listener ||\n\t      (isFunction(list.listener) && list.listener === listener)) {\n\t    delete this._events[type];\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t\n\t  } else if (isObject(list)) {\n\t    for (i = length; i-- > 0;) {\n\t      if (list[i] === listener ||\n\t          (list[i].listener && list[i].listener === listener)) {\n\t        position = i;\n\t        break;\n\t      }\n\t    }\n\t\n\t    if (position < 0)\n\t      return this;\n\t\n\t    if (list.length === 1) {\n\t      list.length = 0;\n\t      delete this._events[type];\n\t    } else {\n\t      list.splice(position, 1);\n\t    }\n\t\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.removeAllListeners = function(type) {\n\t  var key, listeners;\n\t\n\t  if (!this._events)\n\t    return this;\n\t\n\t  // not listening for removeListener, no need to emit\n\t  if (!this._events.removeListener) {\n\t    if (arguments.length === 0)\n\t      this._events = {};\n\t    else if (this._events[type])\n\t      delete this._events[type];\n\t    return this;\n\t  }\n\t\n\t  // emit removeListener for all listeners on all events\n\t  if (arguments.length === 0) {\n\t    for (key in this._events) {\n\t      if (key === 'removeListener') continue;\n\t      this.removeAllListeners(key);\n\t    }\n\t    this.removeAllListeners('removeListener');\n\t    this._events = {};\n\t    return this;\n\t  }\n\t\n\t  listeners = this._events[type];\n\t\n\t  if (isFunction(listeners)) {\n\t    this.removeListener(type, listeners);\n\t  } else if (listeners) {\n\t    // LIFO order\n\t    while (listeners.length)\n\t      this.removeListener(type, listeners[listeners.length - 1]);\n\t  }\n\t  delete this._events[type];\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.listeners = function(type) {\n\t  var ret;\n\t  if (!this._events || !this._events[type])\n\t    ret = [];\n\t  else if (isFunction(this._events[type]))\n\t    ret = [this._events[type]];\n\t  else\n\t    ret = this._events[type].slice();\n\t  return ret;\n\t};\n\t\n\tEventEmitter.prototype.listenerCount = function(type) {\n\t  if (this._events) {\n\t    var evlistener = this._events[type];\n\t\n\t    if (isFunction(evlistener))\n\t      return 1;\n\t    else if (evlistener)\n\t      return evlistener.length;\n\t  }\n\t  return 0;\n\t};\n\t\n\tEventEmitter.listenerCount = function(emitter, type) {\n\t  return emitter.listenerCount(type);\n\t};\n\t\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\t\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\t\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\t\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*! Clusterize.js - v0.16.0 - 2016-03-12\r\n\t* http://NeXTs.github.com/Clusterize.js/\r\n\t* Copyright (c) 2015 Denis Lukov; Licensed GPLv3 */\r\n\t\r\n\t;(function(name, definition) {\r\n\t    if (true) module.exports = definition();\r\n\t    else if (typeof define == 'function' && typeof define.amd == 'object') define(definition);\r\n\t    else this[name] = definition();\r\n\t}('Clusterize', function() {\r\n\t  \"use strict\"\r\n\t\r\n\t  // detect ie9 and lower\r\n\t  // https://gist.github.com/padolsey/527683#comment-786682\r\n\t  var ie = (function(){\r\n\t    for( var v = 3,\r\n\t             el = document.createElement('b'),\r\n\t             all = el.all || [];\r\n\t         el.innerHTML = '<!--[if gt IE ' + (++v) + ']><i><![endif]-->',\r\n\t         all[0];\r\n\t       ){}\r\n\t    return v > 4 ? v : document.documentMode;\r\n\t  }()),\r\n\t  is_mac = navigator.platform.toLowerCase().indexOf('mac') + 1;\r\n\t  var Clusterize = function(data) {\r\n\t    if( ! (this instanceof Clusterize))\r\n\t      return new Clusterize(data);\r\n\t    var self = this;\r\n\t\r\n\t    var defaults = {\r\n\t      item_height: 0,\r\n\t      block_height: 0,\r\n\t      rows_in_block: 50,\r\n\t      rows_in_cluster: 0,\r\n\t      cluster_height: 0,\r\n\t      blocks_in_cluster: 4,\r\n\t      tag: null,\r\n\t      content_tag: null,\r\n\t      show_no_data_row: true,\r\n\t      no_data_class: 'clusterize-no-data',\r\n\t      no_data_text: 'No data',\r\n\t      keep_parity: true,\r\n\t      callbacks: {},\r\n\t      scroll_top: 0\r\n\t    }\r\n\t\r\n\t    // public parameters\r\n\t    self.options = {};\r\n\t    var options = ['rows_in_block', 'blocks_in_cluster', 'show_no_data_row', 'no_data_class', 'no_data_text', 'keep_parity', 'tag', 'callbacks'];\r\n\t    for(var i = 0, option; option = options[i]; i++) {\r\n\t      self.options[option] = typeof data[option] != 'undefined' && data[option] != null\r\n\t        ? data[option]\r\n\t        : defaults[option];\r\n\t    }\r\n\t\r\n\t    var elems = ['scroll', 'content'];\r\n\t    for(var i = 0, elem; elem = elems[i]; i++) {\r\n\t      self[elem + '_elem'] = data[elem + 'Id']\r\n\t        ? document.getElementById(data[elem + 'Id'])\r\n\t        : data[elem + 'Elem'];\r\n\t      if( ! self[elem + '_elem'])\r\n\t        throw new Error(\"Error! Could not find \" + elem + \" element\");\r\n\t    }\r\n\t\r\n\t    // tabindex forces the browser to keep focus on the scrolling list, fixes #11\r\n\t    if( ! self.content_elem.hasAttribute('tabindex'))\r\n\t      self.content_elem.setAttribute('tabindex', 0);\r\n\t\r\n\t    // private parameters\r\n\t    var rows = isArray(data.rows)\r\n\t        ? data.rows\r\n\t        : self.fetchMarkup(),\r\n\t      cache = {data: '', bottom: 0},\r\n\t      scroll_top = self.scroll_elem.scrollTop;\r\n\t\r\n\t    // get row height\r\n\t    self.exploreEnvironment(rows);\r\n\t\r\n\t    // append initial data\r\n\t    self.insertToDOM(rows, cache);\r\n\t\r\n\t    // restore the scroll position\r\n\t    self.scroll_elem.scrollTop = scroll_top;\r\n\t\r\n\t    // adding scroll handler\r\n\t    var last_cluster = false,\r\n\t    scroll_debounce = 0,\r\n\t    pointer_events_set = false,\r\n\t    scrollEv = function() {\r\n\t      // fixes scrolling issue on Mac #3\r\n\t      if (is_mac) {\r\n\t          if( ! pointer_events_set) self.content_elem.style.pointerEvents = 'none';\r\n\t          pointer_events_set = true;\r\n\t          clearTimeout(scroll_debounce);\r\n\t          scroll_debounce = setTimeout(function () {\r\n\t              self.content_elem.style.pointerEvents = 'auto';\r\n\t              pointer_events_set = false;\r\n\t          }, 50);\r\n\t      }\r\n\t      if (last_cluster != (last_cluster = self.getClusterNum()))\r\n\t        self.insertToDOM(rows, cache);\r\n\t      if (self.options.callbacks.scrollingProgress)\r\n\t        self.options.callbacks.scrollingProgress(self.getScrollProgress());\r\n\t    },\r\n\t    resize_debounce = 0,\r\n\t    resizeEv = function() {\r\n\t      clearTimeout(resize_debounce);\r\n\t      resize_debounce = setTimeout(self.refresh, 100);\r\n\t    }\r\n\t    on('scroll', self.scroll_elem, scrollEv);\r\n\t    on('resize', window, resizeEv);\r\n\t\r\n\t    // public methods\r\n\t    self.destroy = function(clean) {\r\n\t      off('scroll', self.scroll_elem, scrollEv);\r\n\t      off('resize', window, resizeEv);\r\n\t      self.html((clean ? self.generateEmptyRow() : rows).join(''));\r\n\t    }\r\n\t    self.refresh = function() {\r\n\t      self.getRowsHeight(rows) && self.update(rows);\r\n\t    }\r\n\t    self.update = function(new_rows) {\r\n\t      rows = isArray(new_rows)\r\n\t        ? new_rows\r\n\t        : [];\r\n\t      var scroll_top = self.scroll_elem.scrollTop;\r\n\t      // fixes #39\r\n\t      if(rows.length * self.options.item_height < scroll_top) {\r\n\t        self.scroll_elem.scrollTop = 0;\r\n\t        last_cluster = 0;\r\n\t      }\r\n\t      self.insertToDOM(rows, cache);\r\n\t      self.scroll_elem.scrollTop = scroll_top;\r\n\t    }\r\n\t    self.clear = function() {\r\n\t      self.update([]);\r\n\t    }\r\n\t    self.getRowsAmount = function() {\r\n\t      return rows.length;\r\n\t    }\r\n\t    self.getScrollProgress = function() {\r\n\t      return this.options.scroll_top / (rows.length * this.options.item_height) * 100 || 0;\r\n\t    }\r\n\t\r\n\t    var add = function(where, _new_rows) {\r\n\t      var new_rows = isArray(_new_rows)\r\n\t        ? _new_rows\r\n\t        : [];\r\n\t      if( ! new_rows.length) return;\r\n\t      rows = where == 'append'\r\n\t        ? rows.concat(new_rows)\r\n\t        : new_rows.concat(rows);\r\n\t      self.insertToDOM(rows, cache);\r\n\t    }\r\n\t    self.append = function(rows) {\r\n\t      add('append', rows);\r\n\t    }\r\n\t    self.prepend = function(rows) {\r\n\t      add('prepend', rows);\r\n\t    }\r\n\t  }\r\n\t\r\n\t  Clusterize.prototype = {\r\n\t    constructor: Clusterize,\r\n\t    // fetch existing markup\r\n\t    fetchMarkup: function() {\r\n\t      var rows = [], rows_nodes = this.getChildNodes(this.content_elem);\r\n\t      while (rows_nodes.length) {\r\n\t        rows.push(rows_nodes.shift().outerHTML);\r\n\t      }\r\n\t      return rows;\r\n\t    },\r\n\t    // get tag name, content tag name, tag height, calc cluster height\r\n\t    exploreEnvironment: function(rows) {\r\n\t      var opts = this.options;\r\n\t      opts.content_tag = this.content_elem.tagName.toLowerCase();\r\n\t      if( ! rows.length) return;\r\n\t      if(ie && ie <= 9 && ! opts.tag) opts.tag = rows[0].match(/<([^>\\s/]*)/)[1].toLowerCase();\r\n\t      if(this.content_elem.children.length <= 1) this.html(rows[0] + rows[0] + rows[0]);\r\n\t      if( ! opts.tag) opts.tag = this.content_elem.children[0].tagName.toLowerCase();\r\n\t      this.getRowsHeight(rows);\r\n\t    },\r\n\t    getRowsHeight: function(rows) {\r\n\t      var opts = this.options,\r\n\t        prev_item_height = opts.item_height;\r\n\t      opts.cluster_height = 0\r\n\t      if( ! rows.length) return;\r\n\t      var nodes = this.content_elem.children;\r\n\t      opts.item_height = nodes[Math.floor(nodes.length / 2)].offsetHeight;\r\n\t      // consider table's border-spacing\r\n\t      if(opts.tag == 'tr' && getStyle('borderCollapse', this.content_elem) != 'collapse')\r\n\t        opts.item_height += parseInt(getStyle('borderSpacing', this.content_elem)) || 0;\r\n\t      opts.block_height = opts.item_height * opts.rows_in_block;\r\n\t      opts.rows_in_cluster = opts.blocks_in_cluster * opts.rows_in_block;\r\n\t      opts.cluster_height = opts.blocks_in_cluster * opts.block_height;\r\n\t      return prev_item_height != opts.item_height;\r\n\t    },\r\n\t    // get current cluster number\r\n\t    getClusterNum: function () {\r\n\t      this.options.scroll_top = this.scroll_elem.scrollTop;\r\n\t      return Math.floor(this.options.scroll_top / (this.options.cluster_height - this.options.block_height)) || 0;\r\n\t    },\r\n\t    // generate empty row if no data provided\r\n\t    generateEmptyRow: function() {\r\n\t      var opts = this.options;\r\n\t      if( ! opts.tag || ! opts.show_no_data_row) return [];\r\n\t      var empty_row = document.createElement(opts.tag),\r\n\t        no_data_content = document.createTextNode(opts.no_data_text), td;\r\n\t      empty_row.className = opts.no_data_class;\r\n\t      if(opts.tag == 'tr') {\r\n\t        td = document.createElement('td');\r\n\t        td.appendChild(no_data_content);\r\n\t      }\r\n\t      empty_row.appendChild(td || no_data_content);\r\n\t      return [empty_row.outerHTML];\r\n\t    },\r\n\t    // generate cluster for current scroll position\r\n\t    generate: function (rows, cluster_num) {\r\n\t      var opts = this.options,\r\n\t        rows_len = rows.length;\r\n\t      if (rows_len < opts.rows_in_block) {\r\n\t        return {\r\n\t          top_offset: 0,\r\n\t          bottom_offset: 0,\r\n\t          rows_above: 0,\r\n\t          rows: rows_len ? rows : this.generateEmptyRow()\r\n\t        }\r\n\t      }\r\n\t      if( ! opts.cluster_height) {\r\n\t        this.exploreEnvironment(rows);\r\n\t      }\r\n\t      var items_start = Math.max((opts.rows_in_cluster - opts.rows_in_block) * cluster_num, 0),\r\n\t        items_end = items_start + opts.rows_in_cluster,\r\n\t        top_offset = Math.max(items_start * opts.item_height, 0),\r\n\t        bottom_offset = Math.max((rows_len - items_end) * opts.item_height, 0),\r\n\t        this_cluster_rows = [],\r\n\t        rows_above = items_start;\r\n\t      if(top_offset < 1) {\r\n\t        rows_above++;\r\n\t      }\r\n\t      for (var i = items_start; i < items_end; i++) {\r\n\t        rows[i] && this_cluster_rows.push(rows[i]);\r\n\t      }\r\n\t      return {\r\n\t        top_offset: top_offset,\r\n\t        bottom_offset: bottom_offset,\r\n\t        rows_above: rows_above,\r\n\t        rows: this_cluster_rows\r\n\t      }\r\n\t    },\r\n\t    renderExtraTag: function(class_name, height) {\r\n\t      var tag = document.createElement(this.options.tag),\r\n\t        clusterize_prefix = 'clusterize-';\r\n\t      tag.className = [clusterize_prefix + 'extra-row', clusterize_prefix + class_name].join(' ');\r\n\t      height && (tag.style.height = height + 'px');\r\n\t      return tag.outerHTML;\r\n\t    },\r\n\t    // if necessary verify data changed and insert to DOM\r\n\t    insertToDOM: function(rows, cache) {\r\n\t      var data = this.generate(rows, this.getClusterNum()),\r\n\t        this_cluster_rows = data.rows.join(''),\r\n\t        this_cluster_content_changed = this.checkChanges('data', this_cluster_rows, cache),\r\n\t        only_bottom_offset_changed = this.checkChanges('bottom', data.bottom_offset, cache),\r\n\t        callbacks = this.options.callbacks,\r\n\t        layout = [];\r\n\t\r\n\t      if(this_cluster_content_changed) {\r\n\t        if(data.top_offset) {\r\n\t          this.options.keep_parity && layout.push(this.renderExtraTag('keep-parity'));\r\n\t          layout.push(this.renderExtraTag('top-space', data.top_offset));\r\n\t        }\r\n\t        layout.push(this_cluster_rows);\r\n\t        data.bottom_offset && layout.push(this.renderExtraTag('bottom-space', data.bottom_offset));\r\n\t        callbacks.clusterWillChange && callbacks.clusterWillChange();\r\n\t        this.html(layout.join(''));\r\n\t        this.options.content_tag == 'ol' && this.content_elem.setAttribute('start', data.rows_above);\r\n\t        callbacks.clusterChanged && callbacks.clusterChanged();\r\n\t      } else if(only_bottom_offset_changed) {\r\n\t        this.content_elem.lastChild.style.height = data.bottom_offset + 'px';\r\n\t      }\r\n\t    },\r\n\t    // unfortunately ie <= 9 does not allow to use innerHTML for table elements, so make a workaround\r\n\t    html: function(data) {\r\n\t      var content_elem = this.content_elem;\r\n\t      if(ie && ie <= 9 && this.options.tag == 'tr') {\r\n\t        var div = document.createElement('div'), last;\r\n\t        div.innerHTML = '<table><tbody>' + data + '</tbody></table>';\r\n\t        while((last = content_elem.lastChild)) {\r\n\t          content_elem.removeChild(last);\r\n\t        }\r\n\t        var rows_nodes = this.getChildNodes(div.firstChild.firstChild);\r\n\t        while (rows_nodes.length) {\r\n\t          content_elem.appendChild(rows_nodes.shift());\r\n\t        }\r\n\t      } else {\r\n\t        content_elem.innerHTML = data;\r\n\t      }\r\n\t    },\r\n\t    getChildNodes: function(tag) {\r\n\t        var child_nodes = tag.children, nodes = [];\r\n\t        for (var i = 0, ii = child_nodes.length; i < ii; i++) {\r\n\t            nodes.push(child_nodes[i]);\r\n\t        }\r\n\t        return nodes;\r\n\t    },\r\n\t    checkChanges: function(type, value, cache) {\r\n\t      var changed = value != cache[type];\r\n\t      cache[type] = value;\r\n\t      return changed;\r\n\t    }\r\n\t  }\r\n\t\r\n\t  // support functions\r\n\t  function on(evt, element, fnc) {\r\n\t    return element.addEventListener ? element.addEventListener(evt, fnc, false) : element.attachEvent(\"on\" + evt, fnc);\r\n\t  }\r\n\t  function off(evt, element, fnc) {\r\n\t    return element.removeEventListener ? element.removeEventListener(evt, fnc, false) : element.detachEvent(\"on\" + evt, fnc);\r\n\t  }\r\n\t  function isArray(arr) {\r\n\t    return Object.prototype.toString.call(arr) === '[object Array]';\r\n\t  }\r\n\t  function getStyle(prop, elem) {\r\n\t    return window.getComputedStyle ? window.getComputedStyle(elem)[prop] : elem.currentStyle[prop];\r\n\t  }\r\n\t\r\n\t  return Clusterize;\r\n\t}));\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.Node = exports.flatten = undefined;\n\t\n\tvar _flatten = __webpack_require__(6);\n\t\n\tvar _flatten2 = _interopRequireDefault(_flatten);\n\t\n\tvar _node = __webpack_require__(8);\n\t\n\tvar _node2 = _interopRequireDefault(_node);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// IE8 compatibility output\n\texports.flatten = _flatten2['default'];\n\texports.Node = _node2['default'];\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _extend = __webpack_require__(7);\n\t\n\tvar _extend2 = _interopRequireDefault(_extend);\n\t\n\tvar _node = __webpack_require__(8);\n\t\n\tvar _node2 = _interopRequireDefault(_node);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// @param {object|array} nodes The tree nodes\n\t// @param {object} [options] The options object\n\t// @param {boolean} [options.openAllNodes] True to open all nodes. Defaults to false.\n\t// @param {array} [options.openNodes] An array that contains the ids of open nodes\n\t// @return {array}\n\tvar flatten = function flatten() {\n\t    var nodes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t    nodes = [].concat(nodes);\n\t\n\t    var flatten = [];\n\t    var stack = [];\n\t    var pool = {\n\t        lastChild: {}\n\t    };\n\t\n\t    options.openAllNodes = !!options.openAllNodes;\n\t    options.openNodes = options.openNodes || [];\n\t    options.throwOnError = !!options.throwOnError;\n\t\n\t    {\n\t        // root node\n\t        var firstNode = nodes.length > 0 ? nodes[0] : null;\n\t        var parentNode = firstNode ? firstNode.parent : null;\n\t        if (parentNode && !(parentNode instanceof _node2['default'])) {\n\t            parentNode = new _node2['default'](parentNode);\n\t        }\n\t        var rootNode = parentNode || new _node2['default']({ // defaults\n\t            label: '',\n\t            parent: null,\n\t            children: nodes,\n\t            state: {\n\t                depth: -1,\n\t                open: true, // always open\n\t                path: '',\n\t                prefixMask: '',\n\t                total: 0\n\t            }\n\t        });\n\t\n\t        if (rootNode === parentNode) {\n\t            var subtotal = rootNode.state.total || 0;\n\t\n\t            // Traversing up through its ancestors\n\t            var p = rootNode;\n\t            while (p) {\n\t                var _p$state = p.state;\n\t                var path = _p$state.path;\n\t                var _p$state$total = _p$state.total;\n\t                var total = _p$state$total === undefined ? 0 : _p$state$total;\n\t\n\t                // Rebuild the lastChild pool\n\t\n\t                if (p.isLastChild() && path) {\n\t                    pool.lastChild[path] = true;\n\t                }\n\t\n\t                // Subtract the number 'subtotal' from the total of the root node and all its ancestors\n\t                p.state.total = total - subtotal;\n\t                if (p.state.total < 0) {\n\t                    if (options.throwOnError) {\n\t                        throw new Error('The node might have been corrupted: id=' + JSON.stringify(p.id) + ', state=' + JSON.stringify(p.state));\n\t                    } else {\n\t                        console && console.log('Error: The node might have been corrupted: id=%s, label=%s, parent=%s, children=%s, state=%s', JSON.stringify(p.id), JSON.stringify(p.label), p.parent, p.children, JSON.stringify(p.state));\n\t                    }\n\t                }\n\t\n\t                p = p.parent;\n\t            }\n\t        }\n\t\n\t        stack.push([rootNode, rootNode.state.depth, 0]);\n\t    }\n\t\n\t    while (stack.length > 0) {\n\t        var _stack$pop = stack.pop();\n\t\n\t        var current = _stack$pop[0];\n\t        var depth = _stack$pop[1];\n\t        var index = _stack$pop[2];\n\t\n\t        var _loop = function _loop() {\n\t            var node = current.children[index];\n\t            if (!(node instanceof _node2['default'])) {\n\t                node = new _node2['default'](node);\n\t            }\n\t            node.parent = current;\n\t            node.children = node.children || [];\n\t\n\t            // Ensure parent.children[index] is equal to the current node\n\t            node.parent.children[index] = node;\n\t\n\t            var path = current.state.path + '.' + index;\n\t            var open = node.hasChildren() && function () {\n\t                var openAllNodes = options.openAllNodes;\n\t                var openNodes = options.openNodes;\n\t\n\t                if (openAllNodes) {\n\t                    return true;\n\t                }\n\t                // determine by node object\n\t                if (openNodes.indexOf(node) >= 0) {\n\t                    return true;\n\t                }\n\t                // determine by node id\n\t                if (openNodes.indexOf(node.id) >= 0) {\n\t                    return true;\n\t                }\n\t                return false;\n\t            }();\n\t            var prefixMask = function (prefix) {\n\t                var mask = '';\n\t                while (prefix.length > 0) {\n\t                    prefix = prefix.replace(/\\.\\d+$/, '');\n\t                    if (!prefix || pool.lastChild[prefix]) {\n\t                        mask = '0' + mask;\n\t                    } else {\n\t                        mask = '1' + mask;\n\t                    }\n\t                }\n\t                return mask;\n\t            }(path);\n\t\n\t            if (node.isLastChild()) {\n\t                pool.lastChild[path] = true;\n\t            }\n\t\n\t            // This allows you to put extra information to node.state\n\t            node.state = (0, _extend2['default'])({}, node.state, {\n\t                depth: depth + 1,\n\t                open: open,\n\t                path: path,\n\t                prefixMask: prefixMask,\n\t                total: 0\n\t            });\n\t\n\t            var parentDidOpen = true;\n\t\n\t            {\n\t                // Check the open state from its ancestors\n\t                var _p = node;\n\t                while (_p.parent !== null) {\n\t                    if (_p.parent.state.open === false) {\n\t                        parentDidOpen = false;\n\t                        break;\n\t                    }\n\t                    _p = _p.parent;\n\t                }\n\t            }\n\t\n\t            if (parentDidOpen) {\n\t                // Push the node to flatten list only if all of its parent nodes have the open state set to true\n\t                flatten.push(node);\n\t\n\t                // Update the total number of visible child nodes\n\t                var _p2 = node;\n\t                while (_p2.parent !== null) {\n\t                    _p2.parent.state.total++;\n\t                    _p2 = _p2.parent;\n\t                }\n\t            }\n\t\n\t            ++index;\n\t\n\t            if (node.hasChildren()) {\n\t                // Push back parent node to the stack that will be able to continue\n\t                // the next iteration once all the child nodes of the current node\n\t                // have been completely explored.\n\t                stack.push([current, depth, index]);\n\t\n\t                index = 0;\n\t                depth = depth + 1;\n\t                current = node;\n\t            }\n\t        };\n\t\n\t        while (index < current.children.length) {\n\t            _loop();\n\t        }\n\t    }\n\t\n\t    return flatten;\n\t};\n\t\n\texports['default'] = flatten;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tvar extend = function extend(target) {\n\t    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        sources[_key - 1] = arguments[_key];\n\t    }\n\t\n\t    if (target === undefined || target === null) {\n\t        throw new TypeError('Cannot convert undefined or null to object');\n\t    }\n\t\n\t    var output = Object(target);\n\t    for (var index = 0; index < sources.length; index++) {\n\t        var source = sources[index];\n\t        if (source !== undefined && source !== null) {\n\t            for (var key in source) {\n\t                if (source.hasOwnProperty(key)) {\n\t                    output[key] = source[key];\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return output;\n\t};\n\t\n\texports['default'] = extend;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _extend = __webpack_require__(7);\n\t\n\tvar _extend2 = _interopRequireDefault(_extend);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Node = function () {\n\t    function Node(node) {\n\t        _classCallCheck(this, Node);\n\t\n\t        this.id = null;\n\t        this.label = '';\n\t        this.parent = null;\n\t        this.children = [];\n\t        this.state = {};\n\t\n\t        (0, _extend2['default'])(this, node);\n\t\n\t        this.children = this.children || [];\n\t    }\n\t    // Gets a child node at the specified index.\n\t    // @param {number} The index of the child node.\n\t    // @return {object} Returns an object that defines the node, null otherwise.\n\t\n\t\n\t    Node.prototype.getChildAt = function getChildAt(index) {\n\t        var node = null;\n\t        if (this.children.length > 0 && index >= 0 && index < this.children.length) {\n\t            node = this.children[index];\n\t        }\n\t        return node;\n\t    };\n\t    // Gets the child nodes.\n\t    // @return {array} Returns an array of objects that define the nodes.\n\t\n\t\n\t    Node.prototype.getChildren = function getChildren() {\n\t        return this.children;\n\t    };\n\t    // Gets the first child node.\n\t    // @return {object} Returns an object that defines the node, null otherwise.\n\t\n\t\n\t    Node.prototype.getFirstChild = function getFirstChild() {\n\t        var node = null;\n\t        if (this.children.length > 0) {\n\t            node = this.children[0];\n\t        }\n\t        return node;\n\t    };\n\t    // Gets the last child node.\n\t    // @return {object} Returns an object that defines the node, null otherwise.\n\t\n\t\n\t    Node.prototype.getLastChild = function getLastChild() {\n\t        var node = null;\n\t        if (this.children.length > 0) {\n\t            node = this.children[this.children.length - 1];\n\t        }\n\t        return node;\n\t    };\n\t    // Gets the next sibling node.\n\t    // @return {object} Returns an object that defines the node, null otherwise.\n\t\n\t\n\t    Node.prototype.getNextSibling = function getNextSibling() {\n\t        var node = null;\n\t        if (this.parent) {\n\t            var index = this.parent.children.indexOf(this);\n\t            if (index >= 0 && index < this.parent.children.length - 1) {\n\t                node = this.parent.children[index + 1];\n\t            }\n\t        }\n\t        return node;\n\t    };\n\t    // Gets the parent node.\n\t    // @return {object} Returns an object that defines the node, null otherwise.\n\t\n\t\n\t    Node.prototype.getParent = function getParent() {\n\t        return this.parent;\n\t    };\n\t    // Gets the previous sibling node.\n\t    // @return {object} Returns an object that defines the node, null otherwise.\n\t\n\t\n\t    Node.prototype.getPreviousSibling = function getPreviousSibling() {\n\t        var node = null;\n\t        if (this.parent) {\n\t            var index = this.parent.children.indexOf(this);\n\t            if (index > 0 && index < this.parent.children.length) {\n\t                node = this.parent.children[index - 1];\n\t            }\n\t        }\n\t        return node;\n\t    };\n\t    // Checks whether this node has children.\n\t    // @return {boolean} Returns true if the node has children, false otherwise.\n\t\n\t\n\t    Node.prototype.hasChildren = function hasChildren() {\n\t        return this.children.length > 0;\n\t    };\n\t    // Checks whether this node is the last child of its parent.\n\t    // @return {boolean} Returns true if the node is the last child of its parent, false otherwise.\n\t\n\t\n\t    Node.prototype.isLastChild = function isLastChild() {\n\t        var hasNextSibling = this.getNextSibling();\n\t        return !hasNextSibling;\n\t    };\n\t\n\t    return Node;\n\t}();\n\t\n\texports['default'] = Node;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar LookupTable = function () {\n\t    function LookupTable() {\n\t        _classCallCheck(this, LookupTable);\n\t\n\t        this.data = {};\n\t    }\n\t\n\t    LookupTable.prototype.clear = function clear() {\n\t        this.data = {};\n\t    };\n\t\n\t    LookupTable.prototype.get = function get(key) {\n\t        return this.data[key];\n\t    };\n\t\n\t    LookupTable.prototype.has = function has(key) {\n\t        return this.data[key] !== undefined;\n\t    };\n\t\n\t    LookupTable.prototype.set = function set(key, value) {\n\t        this.data[key] = value;\n\t        return value;\n\t    };\n\t\n\t    LookupTable.prototype.unset = function unset(key) {\n\t        if (this.data[key] !== undefined) {\n\t            delete this.data[key];\n\t        }\n\t    };\n\t\n\t    return LookupTable;\n\t}();\n\t\n\texports[\"default\"] = LookupTable;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.defaultRowRenderer = undefined;\n\t\n\tvar _helper = __webpack_require__(11);\n\t\n\tvar defaultRowRenderer = function defaultRowRenderer(node, treeOptions) {\n\t    var id = node.id;\n\t    var label = node.label;\n\t    var _node$loadOnDemand = node.loadOnDemand;\n\t    var loadOnDemand = _node$loadOnDemand === undefined ? false : _node$loadOnDemand;\n\t    var children = node.children;\n\t    var state = node.state;\n\t    var depth = state.depth;\n\t    var open = state.open;\n\t    var path = state.path;\n\t    var total = state.total;\n\t    var _state$selected = state.selected;\n\t    var selected = _state$selected === undefined ? false : _state$selected;\n\t\n\t    var childrenLength = Object.keys(children).length;\n\t    var more = node.hasChildren();\n\t\n\t    var togglerContent = '';\n\t    if (more && open) {\n\t        togglerContent = '▼';\n\t    }\n\t    if (more && !open) {\n\t        togglerContent = '►';\n\t    }\n\t    if (!more && loadOnDemand) {\n\t        togglerContent = '►';\n\t    }\n\t    var toggler = (0, _helper.buildHTML)('a', togglerContent, {\n\t        'class': function () {\n\t            if (more && open) {\n\t                return (0, _helper.classNames)('tree-toggler');\n\t            }\n\t            if (more && !open) {\n\t                return (0, _helper.classNames)('tree-toggler', 'tree-closed');\n\t            }\n\t            if (!more && loadOnDemand) {\n\t                return (0, _helper.classNames)('tree-toggler', 'tree-closed');\n\t            }\n\t            return '';\n\t        }()\n\t    });\n\t    var title = (0, _helper.buildHTML)('span', (0, _helper.quoteattr)(label), {\n\t        'class': (0, _helper.classNames)('tree-title')\n\t    });\n\t    var treeNode = (0, _helper.buildHTML)('div', toggler + title, {\n\t        'class': 'tree-node',\n\t        'style': 'margin-left: ' + depth * 18 + 'px'\n\t    });\n\t\n\t    return (0, _helper.buildHTML)('div', treeNode, {\n\t        'aria-id': id,\n\t        'aria-expanded': more && open,\n\t        'aria-depth': depth,\n\t        'aria-path': path,\n\t        'aria-selected': selected,\n\t        'aria-children': childrenLength,\n\t        'aria-total': total,\n\t        'class': (0, _helper.classNames)('tree-item', { 'tree-selected': selected }),\n\t        'droppable': true\n\t    });\n\t};\n\t\n\texports.defaultRowRenderer = defaultRowRenderer;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar extend = function extend(target) {\n\t    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        sources[_key - 1] = arguments[_key];\n\t    }\n\t\n\t    target = target || {};\n\t    for (var index = 0; index < sources.length; index++) {\n\t        var obj = sources[index];\n\t        if (!obj) {\n\t            continue;\n\t        }\n\t        for (var key in obj) {\n\t            if (obj.hasOwnProperty(key)) {\n\t                target[key] = obj[key];\n\t            }\n\t        }\n\t    }\n\t    return target;\n\t};\n\t\n\tvar preventDefault = function preventDefault(e) {\n\t    if (typeof e.preventDefault !== 'undefined') {\n\t        e.preventDefault();\n\t    } else {\n\t        e.returnValue = false;\n\t    }\n\t};\n\t\n\tvar stopPropagation = function stopPropagation(e) {\n\t    if (typeof e.stopPropagation !== 'undefined') {\n\t        e.stopPropagation();\n\t    } else {\n\t        e.cancelBubble = true;\n\t    }\n\t};\n\t\n\t// http://blog.garstasio.com/you-dont-need-jquery/events/#sending-custom-events\n\tvar dispatchEvent = function dispatchEvent(el, eventType) {\n\t    var evt = document.createEvent('Event');\n\t    evt.initEvent(eventType, true, true); // can bubble, and is cancellable\n\t    el.dispatchEvent(evt);\n\t};\n\t\n\t// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Compatibility\n\tvar addEventListener = function addEventListener(target, type, listener) {\n\t    if (target.addEventListener) {\n\t        // Standard\n\t        target.addEventListener(type, listener, false);\n\t    } else if (target.attachEvent) {\n\t        // IE8\n\t        // In Internet Explorer versions before IE 9, you have to use attachEvent rather than the standard addEventListener.\n\t        target.attachEvent('on' + type, listener);\n\t    }\n\t};\n\t\n\t// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n\tvar removeEventListener = function removeEventListener(target, type, listener) {\n\t    if (target.removeEventListener) {\n\t        // Standard\n\t        target.removeEventListener(type, listener, false);\n\t    } else if (target.detachEvent) {\n\t        // IE8\n\t        // In Internet Explorer versions before IE 9, you have to use detachEvent rather than the standard removeEventListener.\n\t        target.detachEvent('on' + type, listener);\n\t    }\n\t};\n\t\n\tvar hasClass = function hasClass(el, className) {\n\t    if (!el) {\n\t        return false;\n\t    }\n\t    var classes = el.className.split(' ');\n\t    return classes.indexOf(className) >= 0;\n\t};\n\t\n\tvar addClass = function addClass(el, className) {\n\t    if (!el) {\n\t        return '';\n\t    }\n\t    if (!hasClass(el, className)) {\n\t        var classes = el.className.split(' ');\n\t        el.className = classes.concat(className).join(' ');\n\t    }\n\t    return el.className;\n\t};\n\t\n\tvar removeClass = function removeClass(el, className) {\n\t    if (!el) {\n\t        return '';\n\t    }\n\t    if (hasClass(el, className)) {\n\t        var classes = el.className.split(' ');\n\t        el.className = classes.filter(function (c) {\n\t            return c !== className;\n\t        }).join(' ');\n\t    }\n\t    return el.className;\n\t};\n\t\n\tvar toggleClass = function toggleClass(el, className) {\n\t    if (!el) {\n\t        return;\n\t    }\n\t    if (hasClass(el, className)) {\n\t        removeClass(el, className);\n\t    } else {\n\t        addClass(el, className);\n\t    }\n\t};\n\t\n\tvar classNames = function classNames() {\n\t    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t        args[_key2] = arguments[_key2];\n\t    }\n\t\n\t    var classNames = [];\n\t    args.forEach(function (arg) {\n\t        if (Array.isArray(arg)) {\n\t            classNames = classNames.concat(arg);\n\t        } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {\n\t            Object.keys(arg).forEach(function (className) {\n\t                var ok = arg[className];\n\t                if (!!ok) {\n\t                    classNames.push(className);\n\t                }\n\t            });\n\t        } else {\n\t            classNames.push(arg);\n\t        }\n\t    });\n\t    return classNames.join(' ');\n\t};\n\t\n\t// http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object\n\t\n\t//Returns true if it is a DOM element\n\tvar isDOMElement = function isDOMElement(o) {\n\t    if ((typeof HTMLElement === 'undefined' ? 'undefined' : _typeof(HTMLElement)) === 'object') {\n\t        return o instanceof HTMLElement;\n\t    }\n\t    return o && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' && o.nodeType === 1 && typeof o.nodeName === 'string';\n\t};\n\t\n\t// Returns true if it is a DOM node\n\tvar isDOMNode = function isDOMNode(o) {\n\t    if ((typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object') {\n\t        return o instanceof Node;\n\t    }\n\t    return o && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' && typeof o.nodeType === 'number' && typeof o.nodeName === 'string';\n\t};\n\t\n\tvar quoteattr = function quoteattr(s, preserveCR) {\n\t    preserveCR = preserveCR ? '&#13;' : '\\n';\n\t    return ('' + s). /* Forces the conversion to string. */\n\t    replace(/&/g, '&amp;') /* This MUST be the 1st replacement. */\n\t    .replace(/'/g, '&apos;') /* The 4 other predefined entities, required. */\n\t    .replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;')\n\t    /*\n\t     * You may add other replacements here for HTML only\n\t     * (but it's not necessary).\n\t     * Or for XML, only if the named entities are defined in its DTD.\n\t     */\n\t    .replace(/\\r\\n/g, preserveCR) /* Must be before the next replacement. */\n\t    .replace(/[\\r\\n]/g, preserveCR);\n\t};\n\t\n\t/**\n\t * Example #1:\n\t * =========================================================================\n\t * <a id=\"mymail href=\"http://mymail.example.com\">My Mail</a>\n\t *\n\t * buildHTML('a', 'My Mail', {\n\t *     id: 'mymail',\n\t *     href: 'http://mymail.example.com'\n\t * });\n\t *\n\t * Example #2:\n\t * =========================================================================\n\t * <input id=\"myinput\" type=\"text\" value=\"myvalue\" />\n\t *\n\t * buildHTML('input', {\n\t *   id: 'myinput',\n\t *   type: 'text',\n\t *   value: 'myvalue'\n\t * });\n\t *\n\t */\n\tvar buildHTML = function buildHTML(tag, html, attrs) {\n\t    switch (tag) {\n\t        case 'select':\n\t            if ((typeof html === 'undefined' ? 'undefined' : _typeof(html)) === 'object') {\n\t                var options = html || {};\n\t                html = '';\n\t                for (var value in options) {\n\t                    if (!options.hasOwnProperty(value)) {\n\t                        continue;\n\t                    }\n\t                    html += buildHTML('option', options[value] || '', { value: value });\n\t                }\n\t            }\n\t            break;\n\t\n\t        default:\n\t            if ((typeof html === 'undefined' ? 'undefined' : _typeof(html)) === 'object') {\n\t                attrs = html;\n\t                html = undefined;\n\t            }\n\t            break;\n\t    }\n\t\n\t    var h = '<' + tag;\n\t    for (var attr in attrs) {\n\t        if (!attrs.hasOwnProperty(attr)) {\n\t            continue;\n\t        }\n\t        if (typeof attrs[attr] !== 'undefined') {\n\t            h += ' ' + attr + '=\"' + quoteattr(attrs[attr]) + '\"';\n\t        }\n\t    }\n\t    h += typeof html !== 'undefined' ? '>' + html + '</' + tag + '>' : '/>';\n\t\n\t    return h;\n\t};\n\t\n\texports.extend = extend;\n\texports.preventDefault = preventDefault;\n\texports.stopPropagation = stopPropagation;\n\texports.dispatchEvent = dispatchEvent;\n\texports.addEventListener = addEventListener;\n\texports.removeEventListener = removeEventListener;\n\texports.hasClass = hasClass;\n\texports.addClass = addClass;\n\texports.removeClass = removeClass;\n\texports.toggleClass = toggleClass;\n\texports.classNames = classNames;\n\texports.isDOMElement = isDOMElement;\n\texports.isDOMNode = isDOMNode;\n\texports.quoteattr = quoteattr;\n\texports.buildHTML = buildHTML;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _helper = __webpack_require__(11);\n\t\n\tvar renderer = function renderer(node, treeOptions) {\n\t    var id = node.id;\n\t    var label = node.label;\n\t    var _node$loadOnDemand = node.loadOnDemand;\n\t    var loadOnDemand = _node$loadOnDemand === undefined ? false : _node$loadOnDemand;\n\t    var children = node.children;\n\t    var state = node.state;\n\t    var _node$props = node.props;\n\t    var props = _node$props === undefined ? {} : _node$props;\n\t\n\t    var droppable = treeOptions.droppable && props.droppable;\n\t    var depth = state.depth;\n\t    var open = state.open;\n\t    var path = state.path;\n\t    var total = state.total;\n\t    var _state$loading = state.loading;\n\t    var loading = _state$loading === undefined ? false : _state$loading;\n\t    var _state$selected = state.selected;\n\t    var selected = _state$selected === undefined ? false : _state$selected;\n\t\n\t    var childrenLength = Object.keys(children).length;\n\t    var more = node.hasChildren();\n\t\n\t    var togglerContent = '';\n\t    if (!more && loadOnDemand) {\n\t        togglerContent = (0, _helper.buildHTML)('i', '', {\n\t            'class': (0, _helper.classNames)('glyphicon', 'glyphicon-triangle-right')\n\t        });\n\t    }\n\t    if (more && open) {\n\t        togglerContent = (0, _helper.buildHTML)('i', '', {\n\t            'class': (0, _helper.classNames)('glyphicon', 'glyphicon-triangle-bottom')\n\t        });\n\t    }\n\t    if (more && !open) {\n\t        togglerContent = (0, _helper.buildHTML)('i', '', {\n\t            'class': (0, _helper.classNames)('glyphicon', 'glyphicon-triangle-right')\n\t        });\n\t    }\n\t    var toggler = (0, _helper.buildHTML)('a', togglerContent, {\n\t        'class': function () {\n\t            if (!more && loadOnDemand) {\n\t                return (0, _helper.classNames)('tree-toggler', 'tree-closed');\n\t            }\n\t            if (more && open) {\n\t                return (0, _helper.classNames)('tree-toggler');\n\t            }\n\t            if (more && !open) {\n\t                return (0, _helper.classNames)('tree-toggler', 'tree-closed');\n\t            }\n\t            return '';\n\t        }()\n\t    });\n\t\n\t    var icon = (0, _helper.buildHTML)('i', '', {\n\t        'class': (0, _helper.classNames)('tree-folder-icon', 'glyphicon', { 'glyphicon-folder-open': more && open }, { 'glyphicon-folder-close': more && !open }, { 'glyphicon-file': !more })\n\t    });\n\t    var title = (0, _helper.buildHTML)('span', (0, _helper.quoteattr)(label), {\n\t        'class': (0, _helper.classNames)('tree-title')\n\t    });\n\t    var loadingIcon = (0, _helper.buildHTML)('i', '', {\n\t        'style': 'margin-left: 5px',\n\t        'class': (0, _helper.classNames)({ 'hidden': !loading }, 'glyphicon', 'glyphicon-refresh', { 'rotating': loading })\n\t    });\n\t    var count = (0, _helper.buildHTML)('span', childrenLength, {\n\t        'class': 'count'\n\t    });\n\t    var treeNode = (0, _helper.buildHTML)('div', toggler + icon + title + loadingIcon + count, {\n\t        'class': 'tree-node',\n\t        'style': 'margin-left: ' + depth * 18 + 'px'\n\t    });\n\t\n\t    var treeNodeAttributes = {\n\t        'aria-id': id,\n\t        'aria-expanded': more && open,\n\t        'aria-depth': depth,\n\t        'aria-path': path,\n\t        'aria-selected': selected,\n\t        'aria-children': childrenLength,\n\t        'aria-total': total,\n\t        'class': (0, _helper.classNames)('tree-item', { 'tree-selected': selected })\n\t    };\n\t    if (droppable) {\n\t        treeNodeAttributes['droppable'] = true;\n\t    }\n\t\n\t    return (0, _helper.buildHTML)('div', treeNode, treeNodeAttributes);\n\t};\n\t\n\texports['default'] = renderer;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(14);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(16)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/stylus-loader/index.js!./index.styl\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/stylus-loader/index.js!./index.styl\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(15)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \".infinite-tree-scroll{overflow:auto;max-height:400px}.infinite-tree-table{width:100%}.infinite-tree-content{outline:0}.infinite-tree-content .tree-selected.tree-item,.infinite-tree-content .tree-selected.tree-item:hover{background:#deecfd;border:1px solid #06c}.infinite-tree-content .tree-item{border:1px solid transparent;cursor:default}.infinite-tree-content .tree-item:hover{background:#f2fdff}.infinite-tree-content .tree-item.highlight{border:1px dotted #ccc;background-color:#f5f6f7}.infinite-tree-content .tree-node{position:relative}.infinite-tree-content .tree-toggler{color:#666;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-tree-content .tree-toggler:hover{color:#333;text-decoration:none}.infinite-tree-content .tree-title{cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-tree-no-data{text-align:center}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\t\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\t\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tvar stylesInDom = {},\r\n\t\tmemoize = function(fn) {\r\n\t\t\tvar memo;\r\n\t\t\treturn function () {\r\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\t\treturn memo;\r\n\t\t\t};\r\n\t\t},\r\n\t\tisOldIE = memoize(function() {\r\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t\t}),\r\n\t\tgetHeadElement = memoize(function () {\r\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t\t}),\r\n\t\tsingletonElement = null,\r\n\t\tsingletonCounter = 0,\r\n\t\tstyleElementsInsertedAtTop = [];\r\n\t\r\n\tmodule.exports = function(list, options) {\r\n\t\tif(true) {\r\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t\t}\r\n\t\r\n\t\toptions = options || {};\r\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t\t// tags it will allow on a page\r\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\t\r\n\t\t// By default, add <style> tags to the bottom of <head>.\r\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\t\r\n\t\tvar styles = listToStyles(list);\r\n\t\taddStylesToDom(styles, options);\r\n\t\r\n\t\treturn function update(newList) {\r\n\t\t\tvar mayRemove = [];\r\n\t\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\t\tvar item = styles[i];\r\n\t\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\t\tdomStyle.refs--;\r\n\t\t\t\tmayRemove.push(domStyle);\r\n\t\t\t}\r\n\t\t\tif(newList) {\r\n\t\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\t\taddStylesToDom(newStyles, options);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction addStylesToDom(styles, options) {\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tif(domStyle) {\r\n\t\t\t\tdomStyle.refs++;\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t\t}\r\n\t\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar parts = [];\r\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction listToStyles(list) {\r\n\t\tvar styles = [];\r\n\t\tvar newStyles = {};\r\n\t\tfor(var i = 0; i < list.length; i++) {\r\n\t\t\tvar item = list[i];\r\n\t\t\tvar id = item[0];\r\n\t\t\tvar css = item[1];\r\n\t\t\tvar media = item[2];\r\n\t\t\tvar sourceMap = item[3];\r\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\t\tif(!newStyles[id])\r\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\t\telse\r\n\t\t\t\tnewStyles[id].parts.push(part);\r\n\t\t}\r\n\t\treturn styles;\r\n\t}\r\n\t\r\n\tfunction insertStyleElement(options, styleElement) {\r\n\t\tvar head = getHeadElement();\r\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\t\tif (options.insertAt === \"top\") {\r\n\t\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t\t} else {\r\n\t\t\t\thead.appendChild(styleElement);\r\n\t\t\t}\r\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t\t} else if (options.insertAt === \"bottom\") {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction removeStyleElement(styleElement) {\r\n\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\t\tif(idx >= 0) {\r\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction createStyleElement(options) {\r\n\t\tvar styleElement = document.createElement(\"style\");\r\n\t\tstyleElement.type = \"text/css\";\r\n\t\tinsertStyleElement(options, styleElement);\r\n\t\treturn styleElement;\r\n\t}\r\n\t\r\n\tfunction createLinkElement(options) {\r\n\t\tvar linkElement = document.createElement(\"link\");\r\n\t\tlinkElement.rel = \"stylesheet\";\r\n\t\tinsertStyleElement(options, linkElement);\r\n\t\treturn linkElement;\r\n\t}\r\n\t\r\n\tfunction addStyle(obj, options) {\r\n\t\tvar styleElement, update, remove;\r\n\t\r\n\t\tif (options.singleton) {\r\n\t\t\tvar styleIndex = singletonCounter++;\r\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t\t} else if(obj.sourceMap &&\r\n\t\t\ttypeof URL === \"function\" &&\r\n\t\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\t\ttypeof Blob === \"function\" &&\r\n\t\t\ttypeof btoa === \"function\") {\r\n\t\t\tstyleElement = createLinkElement(options);\r\n\t\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t\tif(styleElement.href)\r\n\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tstyleElement = createStyleElement(options);\r\n\t\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tupdate(obj);\r\n\t\r\n\t\treturn function updateStyle(newObj) {\r\n\t\t\tif(newObj) {\r\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tupdate(obj = newObj);\r\n\t\t\t} else {\r\n\t\t\t\tremove();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tvar replaceText = (function () {\r\n\t\tvar textStore = [];\r\n\t\r\n\t\treturn function (index, replacement) {\r\n\t\t\ttextStore[index] = replacement;\r\n\t\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t\t};\r\n\t})();\r\n\t\r\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\t\tvar css = remove ? \"\" : obj.css;\r\n\t\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t\t} else {\r\n\t\t\tvar cssNode = document.createTextNode(css);\r\n\t\t\tvar childNodes = styleElement.childNodes;\r\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\t\tif (childNodes.length) {\r\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t\t} else {\r\n\t\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction applyToTag(styleElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\r\n\t\tif(media) {\r\n\t\t\tstyleElement.setAttribute(\"media\", media)\r\n\t\t}\r\n\t\r\n\t\tif(styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = css;\r\n\t\t} else {\r\n\t\t\twhile(styleElement.firstChild) {\r\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t\t}\r\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateLink(linkElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\t\r\n\t\tif(sourceMap) {\r\n\t\t\t// http://stackoverflow.com/a/26603875\r\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t\t}\r\n\t\r\n\t\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\t\r\n\t\tvar oldSrc = linkElement.href;\r\n\t\r\n\t\tlinkElement.href = URL.createObjectURL(blob);\r\n\t\r\n\t\tif(oldSrc)\r\n\t\t\tURL.revokeObjectURL(oldSrc);\r\n\t}\r\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(18);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(16)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/stylus-loader/index.js!./animation.styl\", function() {\n\t\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/stylus-loader/index.js!./animation.styl\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(15)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \".rotating{-webkit-animation:rotating 2s linear infinite;animation:rotating 2s linear infinite}@-webkit-keyframes rotating{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes rotating{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** classic.bundle.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d4baa91a4ea12dadc50e\n **/","import InfiniteTree from '../../src';\nimport renderer from './renderer';\nimport './index.styl';\nimport './animation.styl';\nimport { addEventListener, preventDefault, stopPropagation, quoteattr } from '../../src/helper';\n\nconst data = [];\nconst source = '{\"id\":\"<root>\",\"label\":\"<root>\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"alpha\",\"label\":\"Alpha\",\"props\":{\"droppable\":true}},{\"id\":\"bravo\",\"label\":\"Bravo\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"charlie\",\"label\":\"Charlie\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"delta\",\"label\":\"Delta\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"echo\",\"label\":\"Echo\",\"props\":{\"droppable\":true}},{\"id\":\"foxtrot\",\"label\":\"Foxtrot\",\"props\":{\"droppable\":true}}]},{\"id\":\"golf\",\"label\":\"Golf\",\"props\":{\"droppable\":true}}]},{\"id\":\"hotel\",\"label\":\"Hotel\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"india\",\"label\":\"India\",\"props\":{\"droppable\":true},\"children\":[{\"id\":\"juliet\",\"label\":\"Juliet\",\"props\":{\"droppable\":true}}]}]},{\"id\":\"kilo\",\"label\":\"(Load On Demand) Kilo\",\"loadOnDemand\":true,\"props\":{\"droppable\":true}}]}]}';\n\nfor (let i = 0; i < 1000; ++i) {\n    data.push(JSON.parse(source.replace(/\"(id|label)\":\"([^\"]*)\"/g, '\"$1\": \"$2.' + i + '\"')));\n}\n\nconst updatePreview = (node) => {\n    const el = document.querySelector('#preview');\n    if (node) {\n        let o = {\n            id: node.id,\n            label: node.label,\n            children: node.children ? node.children.length : 0,\n            parent: node.parent ? node.parent.id : null,\n            state: node.state\n        };\n        if (node.loadOnDemand !== undefined) {\n            o.loadOnDemand = node.loadOnDemand;\n        }\n        el.innerHTML = JSON.stringify(o, null, 2).replace(/\\n/g, '<br>').replace(/\\s/g, '&nbsp;');\n    } else {\n        el.innerHTML = '';\n    }\n};\n\nconst tree = new InfiniteTree(document.querySelector('#tree'), {\n    autoOpen: true, // Defaults to false\n    droppable: true, // Defaults to false\n    loadNodes: (parentNode, done) => {\n        const suffix = parentNode.id.replace(/(\\w)+/, '');\n        const nodes = [\n            {\n                id: 'node1' + suffix,\n                label: 'Node 1'\n            },\n            {\n                id: 'node2' + suffix,\n                label: 'Node 2'\n            }\n        ];\n        setTimeout(() => {\n            done(null, nodes);\n        }, 1000);\n    },\n    rowRenderer: renderer,\n    selectable: true, // Defaults to true\n    shouldSelectNode: (node) => { // Defaults to null\n        if (!node || (node === tree.getSelectedNode())) {\n            return false; // Prevent from deselecting the current node\n        }\n        return true;\n    }\n});\n\ntree.on('scrollProgress', (progress) => {\n    document.querySelector('#scrolling-progress').style.width = progress + '%';\n});\ntree.on('update', () => {\n    const node = tree.getSelectedNode();\n    updatePreview(node);\n});\ntree.on('openNode', (node) => {\n    console.log('openNode', node);\n});\ntree.on('closeNode', (node) => {\n    console.log('closeNode', node);\n});\ntree.on('dropNode', (node, e) => {\n    const source = e.dataTransfer.getData('text');\n    console.log('Dragged an element ' + JSON.stringify(source) + ' and dropped to ' + JSON.stringify(node.label));\n    document.querySelector('#dropped-result').innerHTML = 'Dropped to <b>' + quoteattr(node.label) + '</b>';\n});\ntree.on('selectNode', (node) => {\n    updatePreview(node);\n});\n\ntree.loadData(data);\n\n// Select the first node\ntree.selectNode(tree.getChildNodes()[0]);\n\n// Draggable Element\nconst draggableElement = document.querySelector('#draggable-element');\n\n// http://stackoverflow.com/questions/5500615/internet-explorer-9-drag-and-drop-dnd\naddEventListener(draggableElement, 'selectstart', (e) => {\n    preventDefault(e);\n    stopPropagation(e);\n    draggableElement.dragDrop();\n    return false;\n});\n\naddEventListener(draggableElement, 'dragstart', (e) => {\n    e.dataTransfer.effectAllowed = 'move';\n    const target = e.target || e.srcElement;\n    e.dataTransfer.setData('text', target.id);\n    document.querySelector('#dropped-result').innerHTML = '';\n});\n\naddEventListener(draggableElement, 'dragend', function(e) {\n});\n\nwindow.tree = tree;\n\n\n\n/** WEBPACK FOOTER **\n ** ./classic/index.js\n **/","import InfiniteTree from './infinite-tree';\n\nmodule.exports = InfiniteTree;\n\n\n\n/** WEBPACK FOOTER **\n ** ../src/index.js\n **/","import events from 'events';\nimport Clusterize from 'clusterize.js';\nimport { flatten, Node } from 'flattree';\nimport LookupTable from './lookup-table';\nimport { defaultRowRenderer } from './renderer';\nimport {\n    extend,\n    preventDefault,\n    stopPropagation,\n    addEventListener,\n    removeEventListener,\n    classNames,\n    addClass,\n    removeClass,\n    isDOMElement\n} from './helper';\n\nconst ensureNodeInstance = (node) => {\n    if (!(node instanceof Node)) {\n        throw new Error('The node must be a Node object.');\n    }\n    return true;\n};\n\nclass InfiniteTree extends events.EventEmitter {\n    options = {\n        autoOpen: false,\n        containerView: 'div',\n        droppable: false,\n        el: null,\n        loadNodes: null,\n        noDataText: 'No data',\n        rowRenderer: defaultRowRenderer,\n        selectable: true,\n        shouldSelectNode: null\n    };\n    state = {\n        openNodes: [],\n        rootNode: null,\n        selectedNode: null\n    };\n    clusterize = null;\n    nodeTable = new LookupTable();\n    nodes = [];\n    rows = [];\n    scrollElement = null;\n    contentElement = null;\n    dragoverElement = null;\n\n    contentListener = {\n        'click': (e) => {\n            let itemTarget = null;\n            let handleToggler = false;\n\n            stopPropagation(e);\n\n            if (e.target && e.currentTarget) {\n                itemTarget = (e.target !== e.currentTarget) ? e.target : null;\n            } else if (e.srcElement) { // IE8\n                itemTarget = e.srcElement;\n            }\n\n            while (itemTarget && itemTarget.parentElement !== this.contentElement) {\n                if (itemTarget.className.indexOf('tree-toggler') >= 0) {\n                    handleToggler = true;\n                }\n                itemTarget = itemTarget.parentElement;\n            }\n\n            if (!itemTarget) {\n                return;\n            }\n\n            const id = itemTarget.getAttribute('aria-id');\n            const node = this.getNodeById(id);\n\n            if (!node) {\n                return;\n            }\n\n            // Click on the toggler to open/close a tree node\n            if (handleToggler) {\n                this.toggleNode(node);\n                return;\n            }\n\n            this.selectNode(node);\n        },\n        // https://developer.mozilla.org/en-US/docs/Web/Events/dragenter\n        // The dragenter event is fired when a dragged element or text selection enters a valid drop target.\n        'dragenter': (e) => {\n            let itemTarget = null;\n\n            if (e.target && e.currentTarget) {\n                itemTarget = (e.target !== e.currentTarget) ? e.target : null;\n            } else if (e.srcElement) { // IE8\n                itemTarget = e.srcElement;\n            }\n\n            while (itemTarget && itemTarget.parentElement !== this.contentElement) {\n                itemTarget = itemTarget.parentElement;\n            }\n\n            if (!itemTarget) {\n                return;\n            }\n\n            if (this.dragoverElement !== itemTarget) {\n                removeClass(this.dragoverElement, 'highlight'); // remove 'highlight' class\n                this.dragoverElement = null;\n\n                if (!(itemTarget.hasAttribute('droppable'))) {\n                    return;\n                }\n\n                const canDrop = !(itemTarget.getAttribute('droppable').match(/false/i));\n                if (canDrop) {\n                    addClass(itemTarget, 'highlight');\n                    this.dragoverElement = itemTarget;\n                }\n            }\n        },\n        // https://developer.mozilla.org/en-US/docs/Web/Events/dragend\n        // The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n        'dragend': (e) => {\n            if (this.dragoverElement) {\n                removeClass(this.dragoverElement, 'highlight'); // remove 'highlight' class\n                this.dragoverElement = null;\n            }\n        },\n        // https://developer.mozilla.org/en-US/docs/Web/Events/dragover\n        // The dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).\n        'dragover': (e) => {\n            preventDefault(e);\n            e.dataTransfer.dropEffect = 'move';\n            return false;\n        },\n        // https://developer.mozilla.org/en-US/docs/Web/Events/drop\n        // The drop event is fired when an element or text selection is dropped on a valid drop target.\n        'drop': (e) => {\n            // prevent default action (open as link for some elements)\n            preventDefault(e);\n\n            if (this.dragoverElement) {\n                const id = this.dragoverElement.getAttribute('aria-id');\n                const node = this.getNodeById(id);\n\n                removeClass(this.dragoverElement, 'highlight');\n                this.dragoverElement = null;\n\n                this.emit('dropNode', node, e);\n            }\n        }\n    };\n\n    // Creates new InfiniteTree object.\n    constructor(el, options) {\n        super();\n\n        if (isDOMElement(el)) {\n            options.el = el;\n        } else {\n            options = el;\n        }\n\n        // Assign options\n        this.options = extend({}, this.options, options);\n\n        if (!this.options.el) {\n            console.error('Failed to initialize infinite-tree: el is not specified.', options);\n            return;\n        }\n\n        this.create();\n\n        // Load tree data if it's provided\n        if (options.data) {\n            this.loadData(options.data);\n        }\n    }\n    create() {\n        if (!this.options.el) {\n            throw new Error('The element option is not specified.');\n        }\n\n        let tag = null;\n\n        this.scrollElement = document.createElement('div');\n        \n        if (this.options.containerView === 'table') {\n            const tableElement = document.createElement('table');\n            tableElement.className = classNames(\n                'infinite-tree',\n                'infinite-tree-table'\n            );\n            const contentElement = document.createElement('tbody');\n            tableElement.appendChild(contentElement);\n            this.scrollElement.appendChild(tableElement);\n            this.contentElement = contentElement;\n\n            // The tag name for supporting elements\n            tag = 'tr';\n        } else {\n            const contentElement = document.createElement('div');\n            this.scrollElement.appendChild(contentElement);\n            this.contentElement = contentElement;\n\n            // The tag name for supporting elements\n            tag = 'div';\n        }\n        \n        this.scrollElement.className = classNames(\n            'infinite-tree',\n            'infinite-tree-scroll'\n        );\n        this.contentElement.className = classNames(\n            'infinite-tree',\n            'infinite-tree-content'\n        );\n\n        this.options.el.appendChild(this.scrollElement);\n\n        this.clusterize = new Clusterize({\n            tag: tag,\n            rows: [],\n            scrollElem: this.scrollElement,\n            contentElem: this.contentElement,\n            no_data_text: this.options.noDataText,\n            no_data_class: 'infinite-tree-no-data',\n            callbacks: {\n                // Will be called right before replacing previous cluster with new one.\n                clusterWillChange: () => {\n                },\n                // Will be called right after replacing previous cluster with new one.\n                clusterChanged: () => {\n                    // Emit the update event\n                    this.emit('update');\n                },\n                // Will be called on scrolling. Returns progress position.\n                scrollingProgress: (progress) => {\n                    // Emit the scrollProgress event\n                    this.emit('scrollProgress', progress);\n                }\n            }\n        });\n\n        addEventListener(this.contentElement, 'click', this.contentListener.click);\n\n        if (this.options.droppable) {\n            addEventListener(document, 'dragend', this.contentListener.dragend);\n            addEventListener(this.contentElement, 'dragenter', this.contentListener.dragenter);\n            addEventListener(this.contentElement, 'dragover', this.contentListener.dragover);\n            addEventListener(this.contentElement, 'drop', this.contentListener.drop);\n        }\n    }\n    destroy() {\n        removeEventListener(this.contentElement, 'click', this.contentListener);\n        if (this.options.droppable) {\n            removeEventListener(document, 'dragend', this.contentListener.dragend);\n            removeEventListener(this.contentElement, 'dragenter', this.contentListener.dragenter);\n            removeEventListener(this.contentElement, 'dragover', this.contentListener.dragover);\n            removeEventListener(this.contentElement, 'drop', this.contentListener.drop);\n        }\n\n        this.clear();\n\n        if (this.clusterize) {\n            this.clusterize.destroy(true); // True to remove all data from the list\n            this.clusterize = null;\n        }\n\n        // Remove all child nodes\n        while (this.contentElement.firstChild) {\n            this.contentElement.removeChild(this.contentElement.firstChild);\n        }\n        while (this.scrollElement.firstChild) {\n            this.scrollElement.removeChild(this.scrollElement.firstChild);\n        }\n        if (this.options.el) {\n            const containerElement = this.options.el;\n            while (containerElement.firstChild) {\n                containerElement.removeChild(containerElement.firstChild);\n            }\n        }\n        this.contentElement = null;\n        this.scrollElement = null;\n    }\n    // Adds an array of new child nodes to a parent node at the specified index.\n    // * If the parent is null or undefined, inserts new childs at the specified index in the top-level.\n    // * If the parent has children, the method adds the new child to it at the specified index.\n    // * If the parent does not have children, the method adds the new child to the parent.\n    // * If the index value is greater than or equal to the number of children in the parent, the method adds the child at the end of the children.\n    // @param {Array} newNodes An array of new child nodes.\n    // @param {number} [index] The 0-based index of where to insert the child node.\n    // @param {Node} parentNode The Node object that defines the parent node.\n    // @return {boolean} Returns true on success, false otherwise.\n    addChildNodes(newNodes, index, parentNode) {\n        newNodes = [].concat(newNodes || []); // Ensure array\n        if (newNodes.length === 0) {\n            return false;\n        }\n\n        if (typeof index === 'object') { // The 'object' type might be Node or null\n            parentNode = index || this.state.rootNode; // Defaults to rootNode if not specified\n            index = parentNode.children.length;\n        } else {\n            parentNode = parentNode || this.state.rootNode; // Defaults to rootNode if not specified\n        }\n\n        ensureNodeInstance(parentNode);\n\n        // Assign parent\n        newNodes.forEach((newNode) => {\n            newNode.parent = parentNode;\n        });\n\n        // Insert new child node at the specified index\n        parentNode.children.splice.apply(parentNode.children, [index, 0].concat(newNodes));\n\n        // Get the index of the first new node within the array of child nodes\n        index = parentNode.children.indexOf(newNodes[0]);\n\n        const deleteCount = parentNode.state.total;\n        const nodes = flatten(parentNode.children, { openNodes: this.state.openNodes });\n        const rows = nodes.map(node => this.options.rowRenderer(node, this.options));\n\n        if (parentNode === this.state.rootNode) {\n            this.nodes = nodes;\n            this.rows = rows;\n        } else {\n            const parentOffset = this.nodes.indexOf(parentNode);\n            if (parentOffset >= 0) {\n                // Update nodes & rows\n                this.nodes.splice.apply(this.nodes, [parentOffset + 1, deleteCount].concat(nodes));\n                this.rows.splice.apply(this.rows, [parentOffset + 1, deleteCount].concat(rows));\n\n                // Update the row corresponding to the parent node\n                this.rows[parentOffset] = this.options.rowRenderer(parentNode, this.options);\n            }\n        }\n\n        // Update the lookup table with newly added nodes\n        parentNode.children.slice(index).forEach((childNode) => {\n            this.flattenNode(childNode).forEach((node) => {\n                if (node.id !== undefined) {\n                    this.nodeTable.set(node.id, node);\n                }\n            });\n        });\n\n        // Updates list with new data\n        this.update();\n\n        return true;\n    }\n    // Adds a new child node to the end of the list of children of a specified parent node.\n    // * If the parent is null or undefined, inserts the child at the specified index in the top-level.\n    // * If the parent has children, the method adds the child as the last child.\n    // * If the parent does not have children, the method adds the child to the parent.\n    // @param {Object} newNode The new child node.\n    // @param {Node} parentNode The Node object that defines the parent node.\n    // @return {boolean} Returns true on success, false otherwise.\n    appendChildNode(newNode, parentNode) {\n        // Defaults to rootNode if the parentNode is not specified\n        parentNode = parentNode || this.state.rootNode;\n        ensureNodeInstance(parentNode);\n        const index = parentNode.children.length;\n        const newNodes = [].concat(newNode || []); // Ensure array\n        return this.addChildNodes(newNodes, index, parentNode);\n    }\n    // Clears the tree.\n    clear() {\n        this.clusterize.clear();\n        this.nodeTable.clear();\n        this.nodes = [];\n        this.rows = [];\n        this.state.openNodes = [];\n        this.state.rootNode = null;\n        this.state.selectedNode = null;\n    }\n    // Closes a node to hide its children.\n    // @param {Node} node The Node object.\n    // @return {boolean} Returns true on success, false otherwise.\n    closeNode(node) {\n        ensureNodeInstance(node);\n\n        // Retrieve node index\n        const nodeIndex = this.nodes.indexOf(node);\n        if (nodeIndex < 0) {\n            throw new Error('Invalid node index');\n        }\n\n        // Check if the closeNode action can be performed\n        if (this.state.openNodes.indexOf(node) < 0) {\n            return false;\n        }\n\n        // Keep selected node unchanged if \"node\" is equal to \"this.state.selectedNode\"\n        if (this.state.selectedNode && (this.state.selectedNode !== node)) {\n            // row #0 - node.0         => parent node (total=4)\n            // row #1   - node.0.0     => close this node; next selected node (total=2)\n            // row #2       node.0.0.0 => selected node (total=0)\n            // row #3       node.0.0.1\n            // row #4     node.0.1\n            const selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n            const rangeFrom = nodeIndex + 1;\n            const rangeTo = nodeIndex + node.state.total;\n\n            if ((rangeFrom <= selectedIndex) && (selectedIndex <= rangeTo)) {\n                this.selectNode(node);\n            }\n        }\n\n        node.state.open = false; // Set the open state to false\n        const openNodes = this.state.openNodes.filter((node) => (node.hasChildren() && node.state.open));\n        this.state.openNodes = openNodes;\n\n        const deleteCount = node.state.total;\n\n        // Subtract the deleteCount for all ancestors (parent, grandparent, etc.) of the current node\n        for (let p = node; p !== null; p = p.parent) {\n            p.state.total = p.state.total - deleteCount;\n        }\n\n        // Update nodes & rows\n        this.nodes.splice(nodeIndex + 1, deleteCount);\n        this.rows.splice(nodeIndex + 1, deleteCount);\n\n        // Update the row corresponding to the node\n        this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\n        // Emit the 'closeNode' event\n        this.emit('closeNode', node);\n\n        // Updates list with new data\n        this.update();\n\n        return true;\n    }\n    // Flattens all child nodes of a parent node by performing full tree traversal using child-parent link.\n    // No recursion or stack is involved.\n    // @param {Node} parentNode The Node object that defines the parent node.\n    // @return {array} Returns an array of Node objects containing all the child nodes of the parent node.\n    flattenChildNodes(parentNode) {\n        // Defaults to rootNode if the parentNode is not specified\n        parentNode = parentNode || this.state.rootNode;\n\n        ensureNodeInstance(parentNode);\n\n        const list = [];\n\n        // Ignore parent node\n        let node = parentNode.getFirstChild();\n        while (node) {\n            list.push(node);\n            if (node.hasChildren()) {\n                node = node.getFirstChild();\n            } else {\n                // find the parent level\n                while ((node.getNextSibling() === null) && (node.parent !== parentNode)) {\n                    // use child-parent link to get to the parent level\n                    node = node.getParent();\n                }\n\n                // Get next sibling\n                node = node.getNextSibling();\n            }\n        }\n\n        return list;\n    }\n    // Flattens a node by performing full tree traversal using child-parent link.\n    // No recursion or stack is involved.\n    // @param {Node} node The Node object.\n    // @return {array} Returns a flattened list of Node objects.\n    flattenNode(node) {\n        return [node].concat(this.flattenChildNodes(node));\n    }\n    // Gets a list of child nodes.\n    // @param {Node} [parentNode] The Node object that defines the parent node. If null or undefined, returns a list of top level nodes.\n    // @return {array} Returns an array of Node objects containing all the child nodes of the parent node.\n    getChildNodes(parentNode) {\n        // Defaults to rootNode if the parentNode is not specified\n        parentNode = parentNode || this.state.rootNode;\n\n        ensureNodeInstance(parentNode);\n\n        return parentNode.children;\n    }\n    // Gets a node by its unique id. This assumes that you have given the nodes in the data a unique id.\n    // @param {string|number} id An unique node id. A null value will be returned if the id doesn't match.\n    // @return {Node} Returns a node the matches the id, null otherwise.\n    getNodeById(id) {\n        let node = this.nodeTable.get(id);\n        if (!node) {\n            // Find the first node that matches the id\n            node = this.nodes.filter((node) => (node.id === id))[0];\n            if (!node) {\n                return null;\n            }\n            this.nodeTable.set(node.id, node);\n        }\n        return node;\n    }\n    // Gets an array of open nodes.\n    // @return {array} Returns an array of Node objects containing open nodes.\n    getOpenNodes() {\n        // returns a shallow copy of an array into a new array object.\n        return this.state.openNodes.slice();\n    }\n    // Gets the root node.\n    // @return {Node} Returns the root node, or null if empty.\n    getRootNode() {\n        return this.state.rootNode;\n    }\n    // Gets the selected node.\n    // @return {Node} Returns the selected node, or null if not selected.\n    getSelectedNode() {\n        return this.state.selectedNode;\n    }\n    // Inserts the specified node after the reference node.\n    // @param {Object} newNode The new sibling node.\n    // @param {Node} referenceNode The Node object that defines the reference node.\n    // @return {boolean} Returns true on success, false otherwise.\n    insertNodeAfter(newNode, referenceNode) {\n        ensureNodeInstance(referenceNode);\n        const parentNode = referenceNode.getParent();\n        const index = parentNode.children.indexOf(referenceNode) + 1;\n        const newNodes = [].concat(newNode || []); // Ensure array\n        return this.addChildNodes(newNodes, index, parentNode);\n    }\n    // Inserts the specified node before the reference node.\n    // @param {Object} newNode The new sibling node.\n    // @param {Node} referenceNode The Node object that defines the reference node.\n    // @return {boolean} Returns true on success, false otherwise.\n    insertNodeBefore(newNode, referenceNode) {\n        ensureNodeInstance(referenceNode);\n        const parentNode = referenceNode.getParent();\n        const index = parentNode.children.indexOf(referenceNode);\n        const newNodes = [].concat(newNode || []); // Ensure array\n        return this.addChildNodes(newNodes, index, parentNode);\n    }\n    // Loads data in the tree.\n    // @param {object|array} data The data is an object or array of objects that defines the node.\n    loadData(data = []) {\n        this.nodes = flatten(data, { openAllNodes: this.options.autoOpen });\n\n        // Clear lookup table\n        this.nodeTable.clear();\n\n        this.state.openNodes = this.nodes.filter((node) => (node.hasChildren() && node.state.open));\n        this.state.rootNode = ((node = null) => {\n            // Finding the root node\n            while (node && node.parent !== null) {\n                node = node.parent;\n            }\n            return node;\n        })(this.nodes[0]);\n        this.state.selectedNode = null;\n\n        // Update the lookup table with newly added nodes\n        this.flattenChildNodes(this.state.rootNode).forEach((node) => {\n            if (node.id !== undefined) {\n                this.nodeTable.set(node.id, node);\n            }\n        });\n\n        // Update rows\n        this.rows = this.nodes.map(node => this.options.rowRenderer(node, this.options));\n\n        // Updates list with new data\n        this.update();\n    }\n    // Opens a node to display its children.\n    // @param {Node} node The Node object.\n    // @return {boolean} Returns true on success, false otherwise.\n    openNode(node) {\n        ensureNodeInstance(node);\n\n        // Retrieve node index\n        const nodeIndex = this.nodes.indexOf(node);\n        if (nodeIndex < 0) {\n            throw new Error('Invalid node index');\n        }\n\n        // Check if the openNode action can be performed\n        if (this.state.openNodes.indexOf(node) >= 0) {\n            return false;\n        }\n\n        if (!node.hasChildren() && node.loadOnDemand) {\n            if (typeof this.options.loadNodes !== 'function') {\n                return false;\n            }\n\n            // Set loading state to true\n            node.state.loading = true;\n            this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\n            // Updates list with new data\n            this.update();\n\n            this.options.loadNodes(node, (err, nodes) => {\n                // Set loading state to false\n                node.state.loading = false;\n                this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\n                // Updates list with new data\n                this.update();\n\n                if (err) {\n                    return;\n                }\n                if (!nodes) {\n                    return;\n                }\n\n                nodes = [].concat(nodes || []); // Ensure array\n                if (nodes.length === 0) {\n                    return;\n                }\n\n                // Append child nodes\n                nodes.forEach((childNode) => {\n                    this.appendChildNode(childNode, node);\n                });\n\n                // Ensure the node has children to prevent from infinite loop\n                if (node.hasChildren()) {\n                    // Call openNode again\n                    this.openNode(node);\n                }\n            });\n\n            return false;\n        }\n\n        node.state.open = true; // Set node.state.open to true\n        const openNodes = [node].concat(this.state.openNodes); // the most recently used items first\n        this.state.openNodes = openNodes;\n\n        const nodes = flatten(node.children, { openNodes: this.state.openNodes });\n        const rows = nodes.map(node => this.options.rowRenderer(node, this.options));\n\n        // Update nodes & rows\n        this.nodes.splice.apply(this.nodes, [nodeIndex + 1, 0].concat(nodes));\n        this.rows.splice.apply(this.rows, [nodeIndex + 1, 0].concat(rows));\n\n        // Update the row corresponding to the node\n        this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\n        // Add all child nodes to the lookup table if the first child does not exist in the lookup table\n        if ((nodes.length > 0) && !(this.nodeTable.get(nodes[0]))) {\n            nodes.forEach((node) => {\n                if (node.id !== undefined) {\n                    this.nodeTable.set(node.id, node);\n                }\n            });\n        }\n\n        // Emit the 'openNode' event\n        this.emit('openNode', node);\n\n        // Updates list with new data\n        this.update();\n\n        return true;\n    }\n    // Removes all child nodes from a parent node.\n    // @param {Node} parentNode The Node object that defines the parent node.\n    // @return {boolean} Returns true on success, false otherwise.\n    removeChildNodes(parentNode) {\n        ensureNodeInstance(parentNode);\n\n        if (parentNode.children.length === 0) {\n            return false;\n        }\n\n        const parentNodeIndex = this.nodes.indexOf(parentNode);\n\n        // Update selected node\n        if ((parentNodeIndex >= 0) && this.state.selectedNode) {\n            // row #0 - node.0         => parent node (total=4)\n            // row #1   - node.0.0\n            // row #2       node.0.0.0 => current selected node\n            // row #3       node.0.0.1\n            // row #4     node.0.1\n            const selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n            const rangeFrom = parentNodeIndex + 1;\n            const rangeTo = parentNodeIndex + parentNode.state.total;\n\n            if ((rangeFrom <= selectedIndex) && (selectedIndex <= rangeTo)) {\n                this.selectNode(parentNode);\n            }\n        }\n\n        // Update parent node\n        parentNode.children = [];\n        parentNode.state.open = parentNode.state.open && (parentNode.children.length > 0);\n\n        // Get the number of nodes to be removed\n        const deleteCount = parentNode.state.total;\n\n        // Subtract the deleteCount for all ancestors (parent, grandparent, etc.) of the current node\n        for (let p = parentNode; p !== null; p = p.parent) {\n            p.state.total = p.state.total - deleteCount;\n        }\n\n        if (parentNodeIndex >= 0) {\n            // Update nodes & rows\n            this.nodes.splice(parentNodeIndex + 1, deleteCount);\n            this.rows.splice(parentNodeIndex + 1, deleteCount);\n\n            // Update the row corresponding to the parent node\n            this.rows[parentNodeIndex] = this.options.rowRenderer(parentNode, this.options);\n        }\n\n        { // Update open nodes and lookup table\n            const childNodes = this.flattenChildNodes(parentNode);\n\n            this.state.openNodes = this.state.openNodes.filter((node) => {\n                return childNodes.indexOf(node) < 0;\n            });\n\n            childNodes.forEach((node) => {\n                this.nodeTable.unset(node.id);\n            });\n        }\n\n        // Updates list with new data\n        this.update();\n\n        return true;\n    }\n    // Removes a node and all of its child nodes.\n    // @param {Node} node The Node object.\n    // @return {boolean} Returns true on success, false otherwise.\n    removeNode(node) {\n        ensureNodeInstance(node);\n\n        const parentNode = node.parent;\n        if (!parentNode) {\n            return false;\n        }\n\n        // Retrieve node index\n        const nodeIndex = this.nodes.indexOf(node);\n        const parentNodeIndex = this.nodes.indexOf(parentNode);\n\n        // Update selected node\n        if ((nodeIndex >= 0) && this.state.selectedNode) {\n            // row #0 - node.0         => parent node (total=4)\n            // row #1   - node.0.0     => remove this node (total=2)\n            // row #2       node.0.0.0 => current selected node (total=0)\n            // row #3       node.0.0.1\n            // row #4     node.0.1     => next selected node (total=0)\n            const selectedIndex = this.nodes.indexOf(this.state.selectedNode);\n            const rangeFrom = nodeIndex;\n            const rangeTo = nodeIndex + node.state.total + 1;\n\n            if ((rangeFrom <= selectedIndex) && (selectedIndex <= rangeTo)) {\n                // Change the selected node in the following order:\n                // 1. next sibling node\n                // 2. previous sibling node\n                // 3. parent node\n                const selectedNode = node.getNextSibling() || node.getPreviousSibling() || node.getParent();\n                this.selectNode(selectedNode);\n            }\n        }\n\n        // Update parent node\n        parentNode.children.splice(parentNode.children.indexOf(node), 1);\n        parentNode.state.open = parentNode.state.open && (parentNode.children.length > 0);\n\n        // Get the number of nodes to be removed\n        const deleteCount = node.state.total + 1;\n\n        // Subtract the deleteCount for all ancestors (parent, grandparent, etc.) of the current node\n        for (let p = parentNode; p !== null; p = p.parent) {\n            p.state.total = p.state.total - deleteCount;\n        }\n\n        if (nodeIndex >= 0) {\n            // Update nodes & rows\n            this.nodes.splice(nodeIndex, deleteCount);\n            this.rows.splice(nodeIndex, deleteCount);\n        }\n\n        // Update the row corresponding to the parent node\n        if (parentNodeIndex >= 0) {\n            this.rows[parentNodeIndex] = this.options.rowRenderer(parentNode, this.options);\n        }\n\n        { // Update open nodes and lookup table\n            const nodes = this.flattenNode(node);\n\n            this.state.openNodes = this.state.openNodes.filter((node) => {\n                return nodes.indexOf(node) < 0;\n            });\n\n            nodes.forEach((node) => {\n                this.nodeTable.unset(node.id);\n            });\n        }\n\n        // Updates list with new data\n        this.update();\n\n        return true;\n    }\n    // Sets the current scroll position to this node.\n    // @param {Node} node The Node object.\n    // @return {number} Returns the vertical scroll position, or -1 on error.\n    scrollToNode(node) {\n        ensureNodeInstance(node);\n\n        // Retrieve node index\n        const nodeIndex = this.nodes.indexOf(node);\n        if (nodeIndex < 0) {\n            return -1;\n        }\n        if (!this.contentElement) {\n            return -1;\n        }\n        // Get the offset height of the first child element that contains the \"tree-item\" class\n        const firstChild = this.contentElement.querySelectorAll('.tree-item')[0];\n        const rowHeight = (firstChild && firstChild.offsetHeight) || 0;\n        return this.scrollTop(nodeIndex * rowHeight);\n    }\n    // Gets (or sets) the current vertical position of the scroll bar.\n    // @param {number} [value] An integer that indicates the new position to set the scroll bar to.\n    // @return {number} Returns the vertical scroll position.\n    scrollTop(value) {\n        if (!this.scrollElement) {\n            return 0;\n        }\n        if (value !== undefined) {\n            this.scrollElement.scrollTop = Number(value);\n        }\n        return this.scrollElement.scrollTop;\n    }\n    // Selects a node.\n    // @param {Node} node The Node object. If null or undefined, deselects the current node.\n    // @return {boolean} Returns true on success, false otherwise.\n    selectNode(node = null) {\n        const { selectable, shouldSelectNode } = this.options;\n\n        if (!selectable) {\n            return false;\n        }\n        if ((typeof shouldSelectNode === 'function') && !shouldSelectNode(node)) {\n            return false;\n        }\n\n        if (node === null) {\n            // Deselect the current node\n            if (this.state.selectedNode) {\n                const selectedNode = this.state.selectedNode;\n                const selectedIndex = this.nodes.indexOf(selectedNode);\n\n                selectedNode.state.selected = false;\n                this.rows[selectedIndex] = this.options.rowRenderer(selectedNode, this.options);\n                this.state.selectedNode = null;\n\n                // Emit the 'selectNode' event\n                this.emit('selectNode', null);\n\n                // Updates list with new data\n                this.update();\n\n                return true;\n            }\n\n            return false;\n        }\n\n        ensureNodeInstance(node);\n\n        // Retrieve node index\n        const nodeIndex = this.nodes.indexOf(node);\n        if (nodeIndex < 0) {\n            throw new Error('Invalid node index');\n        }\n\n        // Select this node\n        if (this.state.selectedNode !== node) {\n            node.state.selected = true;\n\n            // Update the row corresponding to the node\n            this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n        }\n\n        // Deselect the current node\n        if (this.state.selectedNode) {\n            const selectedNode = this.state.selectedNode;\n            const selectedIndex = this.nodes.indexOf(selectedNode);\n            selectedNode.state.selected = false;\n            this.rows[selectedIndex] = this.options.rowRenderer(selectedNode, this.options);\n        }\n\n        if (this.state.selectedNode !== node) {\n            this.state.selectedNode = node;\n\n            // Emit the 'selectNode' event\n            this.emit('selectNode', node);\n        } else {\n            this.state.selectedNode = null;\n\n            // Emit the 'selectNode' event\n            this.emit('selectNode', null);\n        }\n\n        // Updates list with new data\n        this.update();\n\n        return true;\n    }\n    // Toggles a node to display or hide its children.\n    // @param {Node} node The Node object.\n    toggleNode(node) {\n        if (this.state.openNodes.indexOf(node) >= 0) {\n            // close node\n            this.closeNode(node);\n        } else {\n            // open node\n            this.openNode(node);\n        }\n    }\n    // Serializes the current state of a node to a JSON string.\n    // @param {Node} node The Node object. If null, returns the whole tree.\n    // @return {string} Returns a JSON string represented the tree.\n    toString(node = null) {\n        const traverse = (node) => {\n            let s = '[';\n            if (node && node.children) {\n                for (let i = 0; i < node.children.length; ++i) {\n                    let list = [];\n                    s = s + '{';\n                    Object.keys(node).forEach((key) => {\n                        let value = node[key];\n                        if (key === 'parent') { // ignore parent\n                            return;\n                        }\n                        if (key === 'children') { // traverse child nodes\n                            list.push('\"' + key + '\":' + traverse(node.children[i]));\n                            return;\n                        }\n                        if (typeof value === 'string' || typeof value === 'object') {\n                            list.push('\"' + key + '\":' + JSON.stringify(value));\n                        } else { // primitive types\n                            list.push('\"' + key + '\":' + value);\n                        }\n                    });\n                    s = s + list.join(',');\n                    s = s + '}' + ((i === node.children.length - 1) ? '' : ',');\n                }\n            }\n            s = s + ']';\n            return s;\n        };\n\n        if (!node) {\n            node = this.state.rootNode;\n        }\n\n        return traverse(node);\n    }\n    // Updates the tree.\n    update() {\n        // Update the list with new data\n        this.clusterize.update(this.rows);\n    }\n    // Updates the data of a node.\n    // @param {Node} node The Node object.\n    // @param {Object} data The data object.\n    updateNode(node, data) {\n        ensureNodeInstance(node);\n\n        // Clone a new one\n        data = extend({}, data);\n\n        // Ignore keys: children, parent, and state\n        delete data.children;\n        delete data.parent;\n        delete data.state;\n\n        node = extend(node, data);\n\n        // Retrieve node index\n        const nodeIndex = this.nodes.indexOf(node);\n        if (nodeIndex >= 0) {\n            // Update the row corresponding to the node\n            this.rows[nodeIndex] = this.options.rowRenderer(node, this.options);\n\n            // Updates list with new data\n            this.update();\n        }\n    }\n}\n\nexport default InfiniteTree;\n\n\n\n/** WEBPACK FOOTER **\n ** ../src/infinite-tree.js\n **/","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/events/events.js\n ** module id = 3\n ** module chunks = 0 1\n **/","/*! Clusterize.js - v0.16.0 - 2016-03-12\r\n* http://NeXTs.github.com/Clusterize.js/\r\n* Copyright (c) 2015 Denis Lukov; Licensed GPLv3 */\r\n\r\n;(function(name, definition) {\r\n    if (typeof module != 'undefined') module.exports = definition();\r\n    else if (typeof define == 'function' && typeof define.amd == 'object') define(definition);\r\n    else this[name] = definition();\r\n}('Clusterize', function() {\r\n  \"use strict\"\r\n\r\n  // detect ie9 and lower\r\n  // https://gist.github.com/padolsey/527683#comment-786682\r\n  var ie = (function(){\r\n    for( var v = 3,\r\n             el = document.createElement('b'),\r\n             all = el.all || [];\r\n         el.innerHTML = '<!--[if gt IE ' + (++v) + ']><i><![endif]-->',\r\n         all[0];\r\n       ){}\r\n    return v > 4 ? v : document.documentMode;\r\n  }()),\r\n  is_mac = navigator.platform.toLowerCase().indexOf('mac') + 1;\r\n  var Clusterize = function(data) {\r\n    if( ! (this instanceof Clusterize))\r\n      return new Clusterize(data);\r\n    var self = this;\r\n\r\n    var defaults = {\r\n      item_height: 0,\r\n      block_height: 0,\r\n      rows_in_block: 50,\r\n      rows_in_cluster: 0,\r\n      cluster_height: 0,\r\n      blocks_in_cluster: 4,\r\n      tag: null,\r\n      content_tag: null,\r\n      show_no_data_row: true,\r\n      no_data_class: 'clusterize-no-data',\r\n      no_data_text: 'No data',\r\n      keep_parity: true,\r\n      callbacks: {},\r\n      scroll_top: 0\r\n    }\r\n\r\n    // public parameters\r\n    self.options = {};\r\n    var options = ['rows_in_block', 'blocks_in_cluster', 'show_no_data_row', 'no_data_class', 'no_data_text', 'keep_parity', 'tag', 'callbacks'];\r\n    for(var i = 0, option; option = options[i]; i++) {\r\n      self.options[option] = typeof data[option] != 'undefined' && data[option] != null\r\n        ? data[option]\r\n        : defaults[option];\r\n    }\r\n\r\n    var elems = ['scroll', 'content'];\r\n    for(var i = 0, elem; elem = elems[i]; i++) {\r\n      self[elem + '_elem'] = data[elem + 'Id']\r\n        ? document.getElementById(data[elem + 'Id'])\r\n        : data[elem + 'Elem'];\r\n      if( ! self[elem + '_elem'])\r\n        throw new Error(\"Error! Could not find \" + elem + \" element\");\r\n    }\r\n\r\n    // tabindex forces the browser to keep focus on the scrolling list, fixes #11\r\n    if( ! self.content_elem.hasAttribute('tabindex'))\r\n      self.content_elem.setAttribute('tabindex', 0);\r\n\r\n    // private parameters\r\n    var rows = isArray(data.rows)\r\n        ? data.rows\r\n        : self.fetchMarkup(),\r\n      cache = {data: '', bottom: 0},\r\n      scroll_top = self.scroll_elem.scrollTop;\r\n\r\n    // get row height\r\n    self.exploreEnvironment(rows);\r\n\r\n    // append initial data\r\n    self.insertToDOM(rows, cache);\r\n\r\n    // restore the scroll position\r\n    self.scroll_elem.scrollTop = scroll_top;\r\n\r\n    // adding scroll handler\r\n    var last_cluster = false,\r\n    scroll_debounce = 0,\r\n    pointer_events_set = false,\r\n    scrollEv = function() {\r\n      // fixes scrolling issue on Mac #3\r\n      if (is_mac) {\r\n          if( ! pointer_events_set) self.content_elem.style.pointerEvents = 'none';\r\n          pointer_events_set = true;\r\n          clearTimeout(scroll_debounce);\r\n          scroll_debounce = setTimeout(function () {\r\n              self.content_elem.style.pointerEvents = 'auto';\r\n              pointer_events_set = false;\r\n          }, 50);\r\n      }\r\n      if (last_cluster != (last_cluster = self.getClusterNum()))\r\n        self.insertToDOM(rows, cache);\r\n      if (self.options.callbacks.scrollingProgress)\r\n        self.options.callbacks.scrollingProgress(self.getScrollProgress());\r\n    },\r\n    resize_debounce = 0,\r\n    resizeEv = function() {\r\n      clearTimeout(resize_debounce);\r\n      resize_debounce = setTimeout(self.refresh, 100);\r\n    }\r\n    on('scroll', self.scroll_elem, scrollEv);\r\n    on('resize', window, resizeEv);\r\n\r\n    // public methods\r\n    self.destroy = function(clean) {\r\n      off('scroll', self.scroll_elem, scrollEv);\r\n      off('resize', window, resizeEv);\r\n      self.html((clean ? self.generateEmptyRow() : rows).join(''));\r\n    }\r\n    self.refresh = function() {\r\n      self.getRowsHeight(rows) && self.update(rows);\r\n    }\r\n    self.update = function(new_rows) {\r\n      rows = isArray(new_rows)\r\n        ? new_rows\r\n        : [];\r\n      var scroll_top = self.scroll_elem.scrollTop;\r\n      // fixes #39\r\n      if(rows.length * self.options.item_height < scroll_top) {\r\n        self.scroll_elem.scrollTop = 0;\r\n        last_cluster = 0;\r\n      }\r\n      self.insertToDOM(rows, cache);\r\n      self.scroll_elem.scrollTop = scroll_top;\r\n    }\r\n    self.clear = function() {\r\n      self.update([]);\r\n    }\r\n    self.getRowsAmount = function() {\r\n      return rows.length;\r\n    }\r\n    self.getScrollProgress = function() {\r\n      return this.options.scroll_top / (rows.length * this.options.item_height) * 100 || 0;\r\n    }\r\n\r\n    var add = function(where, _new_rows) {\r\n      var new_rows = isArray(_new_rows)\r\n        ? _new_rows\r\n        : [];\r\n      if( ! new_rows.length) return;\r\n      rows = where == 'append'\r\n        ? rows.concat(new_rows)\r\n        : new_rows.concat(rows);\r\n      self.insertToDOM(rows, cache);\r\n    }\r\n    self.append = function(rows) {\r\n      add('append', rows);\r\n    }\r\n    self.prepend = function(rows) {\r\n      add('prepend', rows);\r\n    }\r\n  }\r\n\r\n  Clusterize.prototype = {\r\n    constructor: Clusterize,\r\n    // fetch existing markup\r\n    fetchMarkup: function() {\r\n      var rows = [], rows_nodes = this.getChildNodes(this.content_elem);\r\n      while (rows_nodes.length) {\r\n        rows.push(rows_nodes.shift().outerHTML);\r\n      }\r\n      return rows;\r\n    },\r\n    // get tag name, content tag name, tag height, calc cluster height\r\n    exploreEnvironment: function(rows) {\r\n      var opts = this.options;\r\n      opts.content_tag = this.content_elem.tagName.toLowerCase();\r\n      if( ! rows.length) return;\r\n      if(ie && ie <= 9 && ! opts.tag) opts.tag = rows[0].match(/<([^>\\s/]*)/)[1].toLowerCase();\r\n      if(this.content_elem.children.length <= 1) this.html(rows[0] + rows[0] + rows[0]);\r\n      if( ! opts.tag) opts.tag = this.content_elem.children[0].tagName.toLowerCase();\r\n      this.getRowsHeight(rows);\r\n    },\r\n    getRowsHeight: function(rows) {\r\n      var opts = this.options,\r\n        prev_item_height = opts.item_height;\r\n      opts.cluster_height = 0\r\n      if( ! rows.length) return;\r\n      var nodes = this.content_elem.children;\r\n      opts.item_height = nodes[Math.floor(nodes.length / 2)].offsetHeight;\r\n      // consider table's border-spacing\r\n      if(opts.tag == 'tr' && getStyle('borderCollapse', this.content_elem) != 'collapse')\r\n        opts.item_height += parseInt(getStyle('borderSpacing', this.content_elem)) || 0;\r\n      opts.block_height = opts.item_height * opts.rows_in_block;\r\n      opts.rows_in_cluster = opts.blocks_in_cluster * opts.rows_in_block;\r\n      opts.cluster_height = opts.blocks_in_cluster * opts.block_height;\r\n      return prev_item_height != opts.item_height;\r\n    },\r\n    // get current cluster number\r\n    getClusterNum: function () {\r\n      this.options.scroll_top = this.scroll_elem.scrollTop;\r\n      return Math.floor(this.options.scroll_top / (this.options.cluster_height - this.options.block_height)) || 0;\r\n    },\r\n    // generate empty row if no data provided\r\n    generateEmptyRow: function() {\r\n      var opts = this.options;\r\n      if( ! opts.tag || ! opts.show_no_data_row) return [];\r\n      var empty_row = document.createElement(opts.tag),\r\n        no_data_content = document.createTextNode(opts.no_data_text), td;\r\n      empty_row.className = opts.no_data_class;\r\n      if(opts.tag == 'tr') {\r\n        td = document.createElement('td');\r\n        td.appendChild(no_data_content);\r\n      }\r\n      empty_row.appendChild(td || no_data_content);\r\n      return [empty_row.outerHTML];\r\n    },\r\n    // generate cluster for current scroll position\r\n    generate: function (rows, cluster_num) {\r\n      var opts = this.options,\r\n        rows_len = rows.length;\r\n      if (rows_len < opts.rows_in_block) {\r\n        return {\r\n          top_offset: 0,\r\n          bottom_offset: 0,\r\n          rows_above: 0,\r\n          rows: rows_len ? rows : this.generateEmptyRow()\r\n        }\r\n      }\r\n      if( ! opts.cluster_height) {\r\n        this.exploreEnvironment(rows);\r\n      }\r\n      var items_start = Math.max((opts.rows_in_cluster - opts.rows_in_block) * cluster_num, 0),\r\n        items_end = items_start + opts.rows_in_cluster,\r\n        top_offset = Math.max(items_start * opts.item_height, 0),\r\n        bottom_offset = Math.max((rows_len - items_end) * opts.item_height, 0),\r\n        this_cluster_rows = [],\r\n        rows_above = items_start;\r\n      if(top_offset < 1) {\r\n        rows_above++;\r\n      }\r\n      for (var i = items_start; i < items_end; i++) {\r\n        rows[i] && this_cluster_rows.push(rows[i]);\r\n      }\r\n      return {\r\n        top_offset: top_offset,\r\n        bottom_offset: bottom_offset,\r\n        rows_above: rows_above,\r\n        rows: this_cluster_rows\r\n      }\r\n    },\r\n    renderExtraTag: function(class_name, height) {\r\n      var tag = document.createElement(this.options.tag),\r\n        clusterize_prefix = 'clusterize-';\r\n      tag.className = [clusterize_prefix + 'extra-row', clusterize_prefix + class_name].join(' ');\r\n      height && (tag.style.height = height + 'px');\r\n      return tag.outerHTML;\r\n    },\r\n    // if necessary verify data changed and insert to DOM\r\n    insertToDOM: function(rows, cache) {\r\n      var data = this.generate(rows, this.getClusterNum()),\r\n        this_cluster_rows = data.rows.join(''),\r\n        this_cluster_content_changed = this.checkChanges('data', this_cluster_rows, cache),\r\n        only_bottom_offset_changed = this.checkChanges('bottom', data.bottom_offset, cache),\r\n        callbacks = this.options.callbacks,\r\n        layout = [];\r\n\r\n      if(this_cluster_content_changed) {\r\n        if(data.top_offset) {\r\n          this.options.keep_parity && layout.push(this.renderExtraTag('keep-parity'));\r\n          layout.push(this.renderExtraTag('top-space', data.top_offset));\r\n        }\r\n        layout.push(this_cluster_rows);\r\n        data.bottom_offset && layout.push(this.renderExtraTag('bottom-space', data.bottom_offset));\r\n        callbacks.clusterWillChange && callbacks.clusterWillChange();\r\n        this.html(layout.join(''));\r\n        this.options.content_tag == 'ol' && this.content_elem.setAttribute('start', data.rows_above);\r\n        callbacks.clusterChanged && callbacks.clusterChanged();\r\n      } else if(only_bottom_offset_changed) {\r\n        this.content_elem.lastChild.style.height = data.bottom_offset + 'px';\r\n      }\r\n    },\r\n    // unfortunately ie <= 9 does not allow to use innerHTML for table elements, so make a workaround\r\n    html: function(data) {\r\n      var content_elem = this.content_elem;\r\n      if(ie && ie <= 9 && this.options.tag == 'tr') {\r\n        var div = document.createElement('div'), last;\r\n        div.innerHTML = '<table><tbody>' + data + '</tbody></table>';\r\n        while((last = content_elem.lastChild)) {\r\n          content_elem.removeChild(last);\r\n        }\r\n        var rows_nodes = this.getChildNodes(div.firstChild.firstChild);\r\n        while (rows_nodes.length) {\r\n          content_elem.appendChild(rows_nodes.shift());\r\n        }\r\n      } else {\r\n        content_elem.innerHTML = data;\r\n      }\r\n    },\r\n    getChildNodes: function(tag) {\r\n        var child_nodes = tag.children, nodes = [];\r\n        for (var i = 0, ii = child_nodes.length; i < ii; i++) {\r\n            nodes.push(child_nodes[i]);\r\n        }\r\n        return nodes;\r\n    },\r\n    checkChanges: function(type, value, cache) {\r\n      var changed = value != cache[type];\r\n      cache[type] = value;\r\n      return changed;\r\n    }\r\n  }\r\n\r\n  // support functions\r\n  function on(evt, element, fnc) {\r\n    return element.addEventListener ? element.addEventListener(evt, fnc, false) : element.attachEvent(\"on\" + evt, fnc);\r\n  }\r\n  function off(evt, element, fnc) {\r\n    return element.removeEventListener ? element.removeEventListener(evt, fnc, false) : element.detachEvent(\"on\" + evt, fnc);\r\n  }\r\n  function isArray(arr) {\r\n    return Object.prototype.toString.call(arr) === '[object Array]';\r\n  }\r\n  function getStyle(prop, elem) {\r\n    return window.getComputedStyle ? window.getComputedStyle(elem)[prop] : elem.currentStyle[prop];\r\n  }\r\n\r\n  return Clusterize;\r\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/clusterize.js/clusterize.js\n ** module id = 4\n ** module chunks = 0 1\n **/","'use strict';\n\nexports.__esModule = true;\nexports.Node = exports.flatten = undefined;\n\nvar _flatten = require('./flatten');\n\nvar _flatten2 = _interopRequireDefault(_flatten);\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// IE8 compatibility output\nexports.flatten = _flatten2['default'];\nexports.Node = _node2['default'];\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/flattree/lib/index.js\n ** module id = 5\n ** module chunks = 0 1\n **/","'use strict';\n\nexports.__esModule = true;\n\nvar _extend = require('./extend');\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// @param {object|array} nodes The tree nodes\n// @param {object} [options] The options object\n// @param {boolean} [options.openAllNodes] True to open all nodes. Defaults to false.\n// @param {array} [options.openNodes] An array that contains the ids of open nodes\n// @return {array}\nvar flatten = function flatten() {\n    var nodes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    nodes = [].concat(nodes);\n\n    var flatten = [];\n    var stack = [];\n    var pool = {\n        lastChild: {}\n    };\n\n    options.openAllNodes = !!options.openAllNodes;\n    options.openNodes = options.openNodes || [];\n    options.throwOnError = !!options.throwOnError;\n\n    {\n        // root node\n        var firstNode = nodes.length > 0 ? nodes[0] : null;\n        var parentNode = firstNode ? firstNode.parent : null;\n        if (parentNode && !(parentNode instanceof _node2['default'])) {\n            parentNode = new _node2['default'](parentNode);\n        }\n        var rootNode = parentNode || new _node2['default']({ // defaults\n            label: '',\n            parent: null,\n            children: nodes,\n            state: {\n                depth: -1,\n                open: true, // always open\n                path: '',\n                prefixMask: '',\n                total: 0\n            }\n        });\n\n        if (rootNode === parentNode) {\n            var subtotal = rootNode.state.total || 0;\n\n            // Traversing up through its ancestors\n            var p = rootNode;\n            while (p) {\n                var _p$state = p.state;\n                var path = _p$state.path;\n                var _p$state$total = _p$state.total;\n                var total = _p$state$total === undefined ? 0 : _p$state$total;\n\n                // Rebuild the lastChild pool\n\n                if (p.isLastChild() && path) {\n                    pool.lastChild[path] = true;\n                }\n\n                // Subtract the number 'subtotal' from the total of the root node and all its ancestors\n                p.state.total = total - subtotal;\n                if (p.state.total < 0) {\n                    if (options.throwOnError) {\n                        throw new Error('The node might have been corrupted: id=' + JSON.stringify(p.id) + ', state=' + JSON.stringify(p.state));\n                    } else {\n                        console && console.log('Error: The node might have been corrupted: id=%s, label=%s, parent=%s, children=%s, state=%s', JSON.stringify(p.id), JSON.stringify(p.label), p.parent, p.children, JSON.stringify(p.state));\n                    }\n                }\n\n                p = p.parent;\n            }\n        }\n\n        stack.push([rootNode, rootNode.state.depth, 0]);\n    }\n\n    while (stack.length > 0) {\n        var _stack$pop = stack.pop();\n\n        var current = _stack$pop[0];\n        var depth = _stack$pop[1];\n        var index = _stack$pop[2];\n\n        var _loop = function _loop() {\n            var node = current.children[index];\n            if (!(node instanceof _node2['default'])) {\n                node = new _node2['default'](node);\n            }\n            node.parent = current;\n            node.children = node.children || [];\n\n            // Ensure parent.children[index] is equal to the current node\n            node.parent.children[index] = node;\n\n            var path = current.state.path + '.' + index;\n            var open = node.hasChildren() && function () {\n                var openAllNodes = options.openAllNodes;\n                var openNodes = options.openNodes;\n\n                if (openAllNodes) {\n                    return true;\n                }\n                // determine by node object\n                if (openNodes.indexOf(node) >= 0) {\n                    return true;\n                }\n                // determine by node id\n                if (openNodes.indexOf(node.id) >= 0) {\n                    return true;\n                }\n                return false;\n            }();\n            var prefixMask = function (prefix) {\n                var mask = '';\n                while (prefix.length > 0) {\n                    prefix = prefix.replace(/\\.\\d+$/, '');\n                    if (!prefix || pool.lastChild[prefix]) {\n                        mask = '0' + mask;\n                    } else {\n                        mask = '1' + mask;\n                    }\n                }\n                return mask;\n            }(path);\n\n            if (node.isLastChild()) {\n                pool.lastChild[path] = true;\n            }\n\n            // This allows you to put extra information to node.state\n            node.state = (0, _extend2['default'])({}, node.state, {\n                depth: depth + 1,\n                open: open,\n                path: path,\n                prefixMask: prefixMask,\n                total: 0\n            });\n\n            var parentDidOpen = true;\n\n            {\n                // Check the open state from its ancestors\n                var _p = node;\n                while (_p.parent !== null) {\n                    if (_p.parent.state.open === false) {\n                        parentDidOpen = false;\n                        break;\n                    }\n                    _p = _p.parent;\n                }\n            }\n\n            if (parentDidOpen) {\n                // Push the node to flatten list only if all of its parent nodes have the open state set to true\n                flatten.push(node);\n\n                // Update the total number of visible child nodes\n                var _p2 = node;\n                while (_p2.parent !== null) {\n                    _p2.parent.state.total++;\n                    _p2 = _p2.parent;\n                }\n            }\n\n            ++index;\n\n            if (node.hasChildren()) {\n                // Push back parent node to the stack that will be able to continue\n                // the next iteration once all the child nodes of the current node\n                // have been completely explored.\n                stack.push([current, depth, index]);\n\n                index = 0;\n                depth = depth + 1;\n                current = node;\n            }\n        };\n\n        while (index < current.children.length) {\n            _loop();\n        }\n    }\n\n    return flatten;\n};\n\nexports['default'] = flatten;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/flattree/lib/flatten.js\n ** module id = 6\n ** module chunks = 0 1\n **/","'use strict';\n\nexports.__esModule = true;\nvar extend = function extend(target) {\n    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n    }\n\n    if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    var output = Object(target);\n    for (var index = 0; index < sources.length; index++) {\n        var source = sources[index];\n        if (source !== undefined && source !== null) {\n            for (var key in source) {\n                if (source.hasOwnProperty(key)) {\n                    output[key] = source[key];\n                }\n            }\n        }\n    }\n    return output;\n};\n\nexports['default'] = extend;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/flattree/lib/extend.js\n ** module id = 7\n ** module chunks = 0 1\n **/","'use strict';\n\nexports.__esModule = true;\n\nvar _extend = require('./extend');\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Node = function () {\n    function Node(node) {\n        _classCallCheck(this, Node);\n\n        this.id = null;\n        this.label = '';\n        this.parent = null;\n        this.children = [];\n        this.state = {};\n\n        (0, _extend2['default'])(this, node);\n\n        this.children = this.children || [];\n    }\n    // Gets a child node at the specified index.\n    // @param {number} The index of the child node.\n    // @return {object} Returns an object that defines the node, null otherwise.\n\n\n    Node.prototype.getChildAt = function getChildAt(index) {\n        var node = null;\n        if (this.children.length > 0 && index >= 0 && index < this.children.length) {\n            node = this.children[index];\n        }\n        return node;\n    };\n    // Gets the child nodes.\n    // @return {array} Returns an array of objects that define the nodes.\n\n\n    Node.prototype.getChildren = function getChildren() {\n        return this.children;\n    };\n    // Gets the first child node.\n    // @return {object} Returns an object that defines the node, null otherwise.\n\n\n    Node.prototype.getFirstChild = function getFirstChild() {\n        var node = null;\n        if (this.children.length > 0) {\n            node = this.children[0];\n        }\n        return node;\n    };\n    // Gets the last child node.\n    // @return {object} Returns an object that defines the node, null otherwise.\n\n\n    Node.prototype.getLastChild = function getLastChild() {\n        var node = null;\n        if (this.children.length > 0) {\n            node = this.children[this.children.length - 1];\n        }\n        return node;\n    };\n    // Gets the next sibling node.\n    // @return {object} Returns an object that defines the node, null otherwise.\n\n\n    Node.prototype.getNextSibling = function getNextSibling() {\n        var node = null;\n        if (this.parent) {\n            var index = this.parent.children.indexOf(this);\n            if (index >= 0 && index < this.parent.children.length - 1) {\n                node = this.parent.children[index + 1];\n            }\n        }\n        return node;\n    };\n    // Gets the parent node.\n    // @return {object} Returns an object that defines the node, null otherwise.\n\n\n    Node.prototype.getParent = function getParent() {\n        return this.parent;\n    };\n    // Gets the previous sibling node.\n    // @return {object} Returns an object that defines the node, null otherwise.\n\n\n    Node.prototype.getPreviousSibling = function getPreviousSibling() {\n        var node = null;\n        if (this.parent) {\n            var index = this.parent.children.indexOf(this);\n            if (index > 0 && index < this.parent.children.length) {\n                node = this.parent.children[index - 1];\n            }\n        }\n        return node;\n    };\n    // Checks whether this node has children.\n    // @return {boolean} Returns true if the node has children, false otherwise.\n\n\n    Node.prototype.hasChildren = function hasChildren() {\n        return this.children.length > 0;\n    };\n    // Checks whether this node is the last child of its parent.\n    // @return {boolean} Returns true if the node is the last child of its parent, false otherwise.\n\n\n    Node.prototype.isLastChild = function isLastChild() {\n        var hasNextSibling = this.getNextSibling();\n        return !hasNextSibling;\n    };\n\n    return Node;\n}();\n\nexports['default'] = Node;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/flattree/lib/node.js\n ** module id = 8\n ** module chunks = 0 1\n **/","class LookupTable {\n    data = {};\n\n    clear() {\n        this.data = {};\n    }\n    get(key) {\n        return this.data[key];\n    }\n    has(key) {\n        return this.data[key] !== undefined;\n    }\n    set(key, value) {\n        this.data[key] = value;\n        return value;\n    }\n    unset(key) {\n        if (this.data[key] !== undefined) {\n            delete this.data[key];\n        }\n    }\n}\n\nexport default LookupTable;\n\n\n\n/** WEBPACK FOOTER **\n ** ../src/lookup-table.js\n **/","import { buildHTML, classNames, quoteattr } from './helper';\n\nconst defaultRowRenderer = (node, treeOptions) => {\n    const { id, label, loadOnDemand = false, children, state } = node;\n    const { depth, open, path, total, selected = false } = state;\n    const childrenLength = Object.keys(children).length;\n    const more = node.hasChildren();\n\n    let togglerContent = '';\n    if (more && open) {\n        togglerContent = '▼';\n    }\n    if (more && !open) {\n        togglerContent = '►';\n    }\n    if (!more && loadOnDemand) {\n        togglerContent = '►';\n    }\n    const toggler = buildHTML('a', togglerContent, {\n        'class': (() => {\n            if (more && open) {\n                return classNames('tree-toggler');\n            }\n            if (more && !open) {\n                return classNames('tree-toggler', 'tree-closed');\n            }\n            if (!more && loadOnDemand) {\n                return classNames('tree-toggler', 'tree-closed');\n            }\n            return '';\n        })()\n    });\n    const title = buildHTML('span', quoteattr(label), {\n        'class': classNames('tree-title')\n    });\n    const treeNode = buildHTML('div', toggler + title, {\n        'class': 'tree-node',\n        'style': 'margin-left: ' + depth * 18 + 'px'\n    });\n\n    return buildHTML('div', treeNode, {\n        'aria-id': id,\n        'aria-expanded': more && open,\n        'aria-depth': depth,\n        'aria-path': path,\n        'aria-selected': selected,\n        'aria-children': childrenLength,\n        'aria-total': total,\n        'class': classNames(\n            'tree-item',\n            { 'tree-selected': selected }\n        ),\n        'droppable': true\n    });\n};\n\nexport {\n    defaultRowRenderer\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../src/renderer.js\n **/","const extend = (target, ...sources) => {\n    target = target || {};\n    for (let index = 0; index < sources.length; index++) {\n        let obj = sources[index];\n        if (!obj) {\n            continue;\n        }\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                target[key] = obj[key];\n            }\n        }\n    }\n    return target;\n};\n\nconst preventDefault = (e) => {\n    if (typeof e.preventDefault !== 'undefined') {\n        e.preventDefault();\n    } else {\n        e.returnValue = false;\n    }\n};\n\nconst stopPropagation = (e) => {\n    if (typeof e.stopPropagation !== 'undefined') {\n        e.stopPropagation();\n    } else {\n        e.cancelBubble = true;\n    }\n};\n\n// http://blog.garstasio.com/you-dont-need-jquery/events/#sending-custom-events\nconst dispatchEvent = (el, eventType) => {\n    const evt = document.createEvent('Event');\n    evt.initEvent(eventType, true, true); // can bubble, and is cancellable\n    el.dispatchEvent(evt);\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Compatibility\nconst addEventListener = (target, type, listener) => {\n    if (target.addEventListener) { // Standard\n        target.addEventListener(type, listener, false);\n    } else if (target.attachEvent) { // IE8\n        // In Internet Explorer versions before IE 9, you have to use attachEvent rather than the standard addEventListener.\n        target.attachEvent('on' + type, listener);\n    }\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\nconst removeEventListener = (target, type, listener) => {\n    if (target.removeEventListener) { // Standard\n        target.removeEventListener(type, listener, false);\n    } else if (target.detachEvent) { // IE8\n        // In Internet Explorer versions before IE 9, you have to use detachEvent rather than the standard removeEventListener.\n        target.detachEvent('on' + type, listener);\n    }\n};\n\nconst hasClass = (el, className) => {\n    if (!el) {\n        return false;\n    }\n    const classes = el.className.split(' ');\n    return (classes.indexOf(className) >= 0);\n};\n\nconst addClass = (el, className) => {\n    if (!el) {\n        return '';\n    }\n    if (!hasClass(el, className)) {\n        let classes = el.className.split(' ');\n        el.className = classes.concat(className).join(' ');\n    }\n    return el.className;\n};\n\nconst removeClass = (el, className) => {\n    if (!el) {\n        return '';\n    }\n    if (hasClass(el, className)) {\n        let classes = el.className.split(' ');\n        el.className = classes.filter(c => (c !== className)).join(' ');\n    }\n    return el.className;\n};\n\nconst toggleClass = (el, className) => {\n    if (!el) {\n        return;\n    }\n    if (hasClass(el, className)) {\n        removeClass(el, className);\n    } else {\n        addClass(el, className);\n    }\n};\n\nconst classNames = (...args) => {\n    let classNames = [];\n    args.forEach((arg) => {\n        if (Array.isArray(arg)) {\n            classNames = classNames.concat(arg);\n        } else if (typeof arg === 'object') {\n            Object.keys(arg).forEach((className) => {\n                const ok = arg[className];\n                if (!!ok) {\n                    classNames.push(className);\n                }\n            });\n        } else {\n            classNames.push(arg);\n        }\n    });\n    return classNames.join(' ');\n};\n\n// http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object\n\n//Returns true if it is a DOM element\nconst isDOMElement = (o) => {\n    if (typeof HTMLElement === 'object') {\n        return o instanceof HTMLElement;\n    }\n    return o && typeof o === 'object' && o.nodeType === 1 && typeof o.nodeName === 'string';\n};\n\n// Returns true if it is a DOM node\nconst isDOMNode = (o) => {\n    if (typeof Node === 'object') {\n        return o instanceof Node;\n    }\n    return o && typeof o === 'object' && typeof o.nodeType === 'number' && typeof o.nodeName === 'string';\n};\n\nconst quoteattr = (s, preserveCR) => {\n    preserveCR = preserveCR ? '&#13;' : '\\n';\n    return ('' + s) /* Forces the conversion to string. */\n        .replace(/&/g, '&amp;') /* This MUST be the 1st replacement. */\n        .replace(/'/g, '&apos;') /* The 4 other predefined entities, required. */\n        .replace(/\"/g, '&quot;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        /*\n         * You may add other replacements here for HTML only\n         * (but it's not necessary).\n         * Or for XML, only if the named entities are defined in its DTD.\n         */\n        .replace(/\\r\\n/g, preserveCR) /* Must be before the next replacement. */\n        .replace(/[\\r\\n]/g, preserveCR);\n};\n\n/**\n * Example #1:\n * =========================================================================\n * <a id=\"mymail href=\"http://mymail.example.com\">My Mail</a>\n *\n * buildHTML('a', 'My Mail', {\n *     id: 'mymail',\n *     href: 'http://mymail.example.com'\n * });\n *\n * Example #2:\n * =========================================================================\n * <input id=\"myinput\" type=\"text\" value=\"myvalue\" />\n *\n * buildHTML('input', {\n *   id: 'myinput',\n *   type: 'text',\n *   value: 'myvalue'\n * });\n *\n */\nconst buildHTML = (tag, html, attrs) => {\n    switch (tag) {\n    case 'select':\n        if (typeof(html) === 'object') {\n            let options = html || {};\n            html = '';\n            for (let value in options) {\n                if (!options.hasOwnProperty(value)) {\n                    continue;\n                }\n                html += buildHTML('option', options[value] || '', { value: value });\n            }\n        }\n        break;\n\n    default:\n        if (typeof(html) === 'object') {\n            attrs = html;\n            html = undefined;\n        }\n        break;\n    }\n\n    let h = '<' + tag;\n    for (let attr in attrs) {\n        if (!attrs.hasOwnProperty(attr)) {\n            continue;\n        }\n        if (typeof attrs[attr] !== 'undefined') {\n            h += ' ' + attr + '=\"' + quoteattr(attrs[attr]) + '\"';\n        }\n    }\n    h += (typeof(html) !== 'undefined') ? '>' + html + '</' + tag + '>' : '/>';\n\n    return h;\n};\n\nexport {\n    extend,\n    preventDefault,\n    stopPropagation,\n    dispatchEvent,\n    addEventListener,\n    removeEventListener,\n    hasClass,\n    addClass,\n    removeClass,\n    toggleClass,\n    classNames,\n    isDOMElement,\n    isDOMNode,\n    quoteattr,\n    buildHTML\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../src/helper.js\n **/","import { buildHTML, classNames, quoteattr } from '../../src/helper';\n\nconst renderer = (node, treeOptions) => {\n    const { id, label, loadOnDemand = false, children, state, props = {} } = node;\n    const droppable = (treeOptions.droppable) && (props.droppable);\n    const { depth, open, path, total, loading = false, selected = false } = state;\n    const childrenLength = Object.keys(children).length;\n    const more = node.hasChildren();\n\n    let togglerContent = '';\n    if (!more && loadOnDemand) {\n        togglerContent = buildHTML('i', '', {\n            'class': classNames('glyphicon', 'glyphicon-triangle-right')\n        });\n    }\n    if (more && open) {\n        togglerContent = buildHTML('i', '', {\n            'class': classNames('glyphicon', 'glyphicon-triangle-bottom')\n        });\n    }\n    if (more && !open) {\n        togglerContent = buildHTML('i', '', {\n            'class': classNames('glyphicon', 'glyphicon-triangle-right')\n        });\n    }\n    const toggler = buildHTML('a', togglerContent, {\n        'class': (() => {\n            if (!more && loadOnDemand) {\n                return classNames('tree-toggler', 'tree-closed');\n            }\n            if (more && open) {\n                return classNames('tree-toggler');\n            }\n            if (more && !open) {\n                return classNames('tree-toggler', 'tree-closed');\n            }\n            return '';\n        })()\n    });\n\n    const icon = buildHTML('i', '', {\n        'class': classNames(\n            'tree-folder-icon',\n            'glyphicon',\n            { 'glyphicon-folder-open': more && open },\n            { 'glyphicon-folder-close': more && !open },\n            { 'glyphicon-file': !more }\n        )\n    });\n    const title = buildHTML('span', quoteattr(label), {\n        'class': classNames('tree-title')\n    });\n    const loadingIcon = buildHTML('i', '', {\n        'style': 'margin-left: 5px',\n        'class': classNames(\n            { 'hidden': !loading },\n            'glyphicon',\n            'glyphicon-refresh',\n            { 'rotating': loading }\n        )\n    });\n    const count = buildHTML('span', childrenLength, {\n        'class': 'count'\n    });\n    const treeNode = buildHTML('div', toggler + icon + title + loadingIcon + count, {\n        'class': 'tree-node',\n        'style': 'margin-left: ' + depth * 18 + 'px'\n    });\n\n    let treeNodeAttributes = {\n        'aria-id': id,\n        'aria-expanded': more && open,\n        'aria-depth': depth,\n        'aria-path': path,\n        'aria-selected': selected,\n        'aria-children': childrenLength,\n        'aria-total': total,\n        'class': classNames(\n            'tree-item',\n            { 'tree-selected': selected }\n        )\n    };\n    if (droppable) {\n        treeNodeAttributes['droppable'] = true;\n    }\n\n    return buildHTML('div', treeNode, treeNodeAttributes);\n};\n\nexport default renderer;\n\n\n\n/** WEBPACK FOOTER **\n ** ./classic/renderer.js\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/stylus-loader/index.js!./index.styl\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/stylus-loader/index.js!./index.styl\", function() {\n\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/stylus-loader/index.js!./index.styl\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./classic/index.styl\n ** module id = 13\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".infinite-tree-scroll{overflow:auto;max-height:400px}.infinite-tree-table{width:100%}.infinite-tree-content{outline:0}.infinite-tree-content .tree-selected.tree-item,.infinite-tree-content .tree-selected.tree-item:hover{background:#deecfd;border:1px solid #06c}.infinite-tree-content .tree-item{border:1px solid transparent;cursor:default}.infinite-tree-content .tree-item:hover{background:#f2fdff}.infinite-tree-content .tree-item.highlight{border:1px dotted #ccc;background-color:#f5f6f7}.infinite-tree-content .tree-node{position:relative}.infinite-tree-content .tree-toggler{color:#666;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-tree-content .tree-toggler:hover{color:#333;text-decoration:none}.infinite-tree-content .tree-title{cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-tree-no-data{text-align:center}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/css-loader!../~/stylus-loader!./classic/index.styl\n ** module id = 14\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/css-loader/lib/css-base.js\n ** module id = 15\n ** module chunks = 0 1\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/style-loader/addStyles.js\n ** module id = 16\n ** module chunks = 0 1\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/stylus-loader/index.js!./animation.styl\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/stylus-loader/index.js!./animation.styl\", function() {\n\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./../../node_modules/stylus-loader/index.js!./animation.styl\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./classic/animation.styl\n ** module id = 17\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".rotating{-webkit-animation:rotating 2s linear infinite;animation:rotating 2s linear infinite}@-webkit-keyframes rotating{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes rotating{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/css-loader!../~/stylus-loader!./classic/animation.styl\n ** module id = 18\n ** module chunks = 0\n **/"],"sourceRoot":""}